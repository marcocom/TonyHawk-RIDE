package com.thride.news{	import flash.display.Sprite;	import flash.display.Loader;	import flash.display.Shape;		import flash.text.TextField;	import flash.net.URLLoader;	import flash.net.URLRequest;		import flash.geom.ColorTransform;		import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;		import flash.geom.Rectangle;		import gs.TweenLite;	import gs.easing.*;			public class Thumb extends Sprite	{		private static const ITEM_HEIGHT:Number = 80;		private static const ITEM_WIDTH:Number = 260;				private var title:String;		private var asset:String;		private var date:String;				public var index:Number;				private var callBack:Function;		private var finishLoading:Function;		private var createRollOver:Function;				private var bg:Sprite;		private var img:Sprite;		private var txtClip:NavItemTxt;		private var frame:Sprite;				private var imgLoader:Loader;						private var isOn:Boolean = true;								public function Thumb($title:String, $asset:String, $date:String, $index:Number, $func:Function)		{			title = $title;			asset = $asset;			date = $date;						index = $index;			callBack = $func;			//trace("THUMB INIT: title"+title+" asset:"+asset);			init();			if(index == 0) isOn = false;		}				private function init(){			initImage();		}				private function initTxt()		{			txtClip = new NavItemTxt();			txtClip.x = img.x + img.width + 5;			txtClip.y = img.y;						var dateTxt:TextField = txtClip.getChildByName("datetxt") as TextField;			dateTxt.text = date;						var titleTxt:TextField = txtClip.getChildByName("titletxt") as TextField;			var extract:String = title.substring(0, 70) + "...";			titleTxt.htmlText = extract;						addChild(txtClip);		}				private function initBG()		{			bg = new Sprite();			bg.graphics.beginFill(0x000000, 0);			bg.graphics.drawRect(0,0, ITEM_WIDTH, ITEM_HEIGHT);			bg.graphics.endFill();			addChild(bg);		}				private function initFrame()		{			frame = new Sprite();			frame.graphics.lineStyle(2, 0x000000, 1, true);			frame.graphics.drawRect(-2,-2, (img.width+4), (img.height+4));			frame.graphics.endFill();			addChild(frame);			frame.x = img.x;			frame.y = img.y;		}				private function initImage()		{			imgLoader = new Loader();			imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imgLoaded);			imgLoader.load(new URLRequest(asset));		}		private function imgLoaded(e:Event)		{			img = new Sprite();			addChild(img);			img.x = 5;			img.y = 5;			img.addChild(e.currentTarget.content);			TweenLite.from(img, .5, {alpha:0});			initTxt();			initFrame();			initBG();						isOn ? onState() : offState();		}								private function setListeners()		{							addEventListener(MouseEvent.MOUSE_OVER, onThumbOver);				addEventListener(MouseEvent.MOUSE_OUT, onThumbOut);				addEventListener(MouseEvent.CLICK, onThumbClick);				buttonMode = true;		}		private function closeListeners()		{				removeEventListener(MouseEvent.MOUSE_OVER, onThumbOver);				removeEventListener(MouseEvent.MOUSE_OUT, onThumbOut);				removeEventListener(MouseEvent.CLICK, onThumbClick);				buttonMode = false;		}						private function onThumbOver(e:MouseEvent)		{			trace("OVER : "+index);		}		private function onThumbOut(e:MouseEvent)		{					}		private function onThumbClick(e:MouseEvent)		{						callBack(index);			//this.parent.removeChild(this);		}				public function onState()		{			isOn = true;			setListeners();			trace("ONSTATE :"+index);			//frame.alpha = 0;			TweenLite.killTweensOf(frame);			TweenLite.to(frame, 1, {alpha:0});		}		public function offState()		{			trace("OFFSTATE :"+index);			closeListeners();			isOn = false;			//frame.alpha = 1;			TweenLite.killTweensOf(frame);			TweenLite.to(frame, 1, {alpha:1});		}				public function get _index():Number		{			return index;		}	}}