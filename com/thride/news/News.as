package com.thride.news{	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TextEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.navigateToURL;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.utils.Timer;		import flash.geom.Rectangle;		import com.dynamicflash.util.Base64;	import com.thride.Global;	import com.thride.NavEvent;	import com.asual.swfaddress.*;	import gs.TweenLite;	import gs.easing.*;		public class News extends MovieClip	{				private var newsSpacer:Number = 5;				private var xmlList:XMLList;		private var dataXML:XML = new XML();		private var xmlloader:Loader;				private var navArr:Array;		private var elementArr:Array;				private var xmlAsset:String;		private var imgLoader:Loader;		private var bgClip:Sprite;		private var imgClip:Sprite;		private var maskClip:Sprite;		private var titleImg:Sprite;		private var rssBut:Sprite;				private var titleTxt:TextField;		private var dateTxt:TextField;		private var copyTxt:TextField;				private var thumbNav:NewsNav;				private var currentContent:DisplayObject;		private var currentChoice:Number;				private var totalElements:Number;		public function News()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);				}		////////CONSTRUCT				private function onAdded(e:Event)		{			visible = false;			bgClip = getChildByName("bgclip") as Sprite;			bgClip.visible = false;			thumbNav = getChildByName("thumbnav") as NewsNav;			thumbNav.visible = false;						imgClip = getChildByName("imgdyn") as Sprite;			titleImg = getChildByName("titledyn") as Sprite;			rssBut = getChildByName("rssdyn") as Sprite;						titleTxt = getChildByName("titletxt") as TextField;			dateTxt = getChildByName("datetxt") as TextField;			copyTxt = getChildByName("copytxt") as TextField;					}				public function init($xmlsrc:String)		{									xmlAsset = $xmlsrc;			loadData();		}				private function initClips() {			totalElements = dataXML.stories.elements().length();			thumbNav.init(dataXML.stories);			thumbNav.visible = true;						loadGraphic(dataXML.title.@asset, titleImg);						addEventListener(TextEvent.LINK, linkHandler);			initRSS();			checkDeepLink();		}						private function addressChange(e:SWFAddressEvent)		{			var arr:Array = SWFAddress.getPathNames();						trace("\n\nNEWS --- ADDRESS CHANGE name:"+e.value+" ARR: length:"+arr.length+" vals:"+arr);			if(arr.length == 2){ 								var flip:Number = Math.abs(arr[1] - totalElements);				changeNews(flip);			}					}				private function checkDeepLink()		{			SWFAddress.addEventListener(SWFAddressEvent.CHANGE, addressChange);			var arr:Array = SWFAddress.getPathNames();			trace("DEEPLINK : length:"+arr.length);			if(arr.length < 2){ 				SWFAddress.setValue("news/"+totalElements);			} else {								var flip:Number = Math.abs(arr[1] - totalElements);				changeNews(flip);			}		}				private function changeNews(num:Number)		{			imgLoader = new Loader();			imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imgLoaded);			imgLoader.load(new URLRequest(dataXML.stories.story[num].@asset));						currentChoice = num;			//vidPlayer.changeImage(num);			thumbNav.highlightThumb(num);									trace("CHANGE NEWS:" + num);		}							private function imgLoaded(e:Event)		{			if(currentContent) currentContent.parent.removeChild(currentContent);			imgClip.addChild(imgLoader);			currentContent = imgLoader;			TweenLite.from(imgLoader, 1, {tint:0xFFFFFF, ease:Strong.easeOut});									titleTxt.autoSize = TextFieldAutoSize.LEFT;			titleTxt.htmlText = dataXML.stories.story[currentChoice].title.valueOf();			titleTxt.y = imgClip.y + imgClip.height + newsSpacer;			TweenLite.from(titleTxt, 1, { alpha:0 } );						dateTxt.autoSize = TextFieldAutoSize.LEFT;			dateTxt.htmlText = dataXML.stories.story[currentChoice].@date;			dateTxt.y = titleTxt.y + titleTxt.textHeight + newsSpacer;						TweenLite.from(dateTxt, 1, { alpha:0 } );						copyTxt.autoSize = TextFieldAutoSize.LEFT;			copyTxt.htmlText = dataXML.stories.story[currentChoice].copyblock.valueOf();			copyTxt.y = dateTxt.y + dateTxt.textHeight + newsSpacer;			TweenLite.from(copyTxt, 2, { alpha:0 } );								}				private function linkHandler(e:TextEvent)		{            var url:String = e.text			dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, false, url));        }				/////////////////////////////RSS				private function rssAction(e:MouseEvent)		{			//<------------------------------------RSS ACTION HERE <<			//dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, true, dataXML.rss.@url));			linkTrack(dataXML.rss.@url);			//navigateToURL(new URLRequest(dataXML.rss.@url), "_blank");		}				private function linkTrack(url:String)		{			//get.php?a=" +  Base64.encode(e.target.link) + "&d=\"THXI Preorder\"&t=\"THXI Preorder\"" + "','" + e.target.text			var sendString:String = Global.LINKTRACK+"?a=" + Base64.encode(url) + "&d=" + Base64.encode(Global.COUNTRY) + "&t=" + Base64.encode("THRIDE");			trace("TRACK:"+sendString);			navigateToURL(new URLRequest(sendString), "_blank");		}				private function initRSS()		{			var asset:String = dataXML.rss.@asset;			var l = new Loader();			function finishload(e:Event){				rssBut.addChild(e.currentTarget.content);				TweenLite.from(rssBut, 1, { alpha:0, ease:Strong.easeOut } );				rssBut.addEventListener(MouseEvent.CLICK, rssAction);				rssBut.buttonMode = true;			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}						private function loadGraphic(asset:String, target:Sprite)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function popTxt(txt:String, target:MovieClip)		{			var field:TextField = target.getChildByName("txt") as TextField;			field.htmlText = txt;		}						/////////////////////////////////////HANDLERS														 				/******************************************		XML		*******************************************/				private function loadData()		{			var dataURL:URLRequest = new URLRequest(xmlAsset);			var xmlLoader:URLLoader = new URLLoader(dataURL);			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			dataXML.ignoreWhitespace = true;			dataXML.ignoreProcessingInstructions;		} 				private function xmlLoaded(event:Event) 		{									dataXML = new XML(event.currentTarget.data);						var totalSections:Number = dataXML.elements().length();			trace("LOADDATA :: total K:"+event.currentTarget.bytesTotal);			trace("TOTAL FIRST NODES==================================================:"+totalSections); 						bgClip.visible = true;			TweenLite.from(bgClip, .5, { x:Global.SWFWIDTH, ease:Bounce.easeOut, onComplete:initClips } );			visible = true;			//initClips();		}			}}