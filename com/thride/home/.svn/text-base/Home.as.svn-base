package com.thride.home{	import com.asual.swfaddress.*;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.DisplayObject;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.utils.Timer;		import flash.geom.Rectangle;		import com.thride.NavEvent;	import com.thride.Global;	import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });			public class Home extends MovieClip	{		public var SWFWIDTH:Number = Global.SWFWIDTH;		public var SWFHEIGHT:Number = Global.SWFHEIGHT;				private var xmlList:XMLList;		private var dataXML:XML = new XML();		private var xmlloader:Loader;				private var navArr:Array;		private var elementArr:Array;				private var xmlAsset:String;				private var main_promoMC:MovieClip;		private var tricks_videoMC:MovieClip;		private var facebookMC:MovieClip;				private var standupMC:MovieClip;		private var fingerpointMC:MovieClip;		private var twitterMC:MovieClip;		private var trickphotoMC:MovieClip;		private var eventsMC:MovieClip;				private var leftbottomMC:MovieClip;		private var boardMC:MovieClip;		private var rideMC:MovieClip;		private var rightbottomMC:MovieClip;				private var currentElement:MovieClip;				private var rollTimer:Timer = new Timer(500, 1);				public function Home()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);				}				public function init($xmlsrc:String)		{									xmlAsset = $xmlsrc;			loadData();		}						/////////////////////////////////////BG and opening anim				private function initBG()		{			elementArr = new Array();			elementArr = [  							main_promoMC,							tricks_videoMC,							facebookMC,														standupMC,							fingerpointMC,							twitterMC,							trickphotoMC,							eventsMC,														leftbottomMC,							boardMC,							rideMC,							rightbottomMC						  ];						var inst:Array = [						  "main_promo",						  "tricks_video",						  "facebook_promo",						  "standup_promo",						  "fingerpoint",						  "twitter_promo",						  "trickphoto",						  "events",						  "leftbottom_anim",						  "board_promo",						  "ride_promo",						  "rightbottom_anim"						  ];						function firstAnim(mc:MovieClip){				mc.gotoAndPlay("over");			}			for(var i:int; i < elementArr.length; i++){				elementArr[i] = this.getChildByName(inst[i]) as MovieClip;				var xpos:Number;				var ypos:Number;								//xpos = (Math.random() * (SWFWIDTH/2))-elementArr[i].height;				xpos = i % 2 > 0 ? xpos = SWFWIDTH : xpos = -elementArr[i].width; 				ypos = (Math.random()*600)+200;				TweenLite.from(elementArr[i], ((i+1)*.1), {x:xpos, y:ypos, rotation:-5, ease:Bounce.easeOut, onComplete:firstAnim, onCompleteParams:[elementArr[i]] });								elementArr[i].addEventListener(MouseEvent.ROLL_OVER, elementOver);				elementArr[i].addEventListener(MouseEvent.ROLL_OUT, elementOut);								if(i > 0){					elementArr[i].addEventListener(MouseEvent.CLICK, elementClick);					elementArr[i].buttonMode = true;					elementArr[i].mouseChildren = false;				}								var s:XMLList = dataXML[inst[i]];				//trace("dataXML:"+inst[i]+":\n"+s);				elementArr[i].datalist = s;			}			visible = true;		}								/////////////////////////////////////HANDLERS				private function elementClick(e:MouseEvent)		{						trace("TESTING CLICK : "+e.currentTarget.name);			e.currentTarget.id != "linkout" ? SWFAddress.setValue(e.currentTarget.id) : dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, false, dataXML[e.currentTarget.name].@url));		}				private function delayedOpen(e:TimerEvent){			currentElement.openAnim();			trace("DELAYED OPEN!!");		}				private function elementOver(e:MouseEvent)		{			rollTimer.stop();			var mc:MovieClip = e.currentTarget as MovieClip;			currentElement = mc;			addChild(mc);			rollTimer.addEventListener(TimerEvent.TIMER_COMPLETE, delayedOpen);			rollTimer.start();			//e.currentTarget.openAnim();						trace("\nELEMENT OVER:"+mc.name);						for(var i:int; i < elementArr.length; i++){				elementArr[i].name != e.currentTarget.name ?					elementArr[i].darkness(true) : 					elementArr[i].darkness(false);							}		}		private function elementOut(e:MouseEvent)		{			rollTimer.stop();			e.target.closeAnim();						for(var i:int; i < elementArr.length; i++){					elementArr[i].darkness(false);					elementArr[i].addEventListener(MouseEvent.ROLL_OUT, elementOut);			}		}						private function testHit(e:Event){						var tpoint:Point = localToGlobal(new Point(mouseX,mouseY));			if(!e.target.hitTestPoint(tpoint.x,tpoint.y,true)){ 				e.target.closeAnim();				for(var i:int; i < elementArr.length; i++){						elementArr[i].darkness(false);						elementArr[i].addEventListener(MouseEvent.ROLL_OUT, elementOut);				}				e.target.removeEventListener(Event.ENTER_FRAME, testHit);			}		}						////////CONSTRUCT				private function onAdded(e:Event)		{			visible = false;			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);		}				private function onRemoved(e:Event)		{			for(var i:int; i < numChildren; i++){				var disp:DisplayObject = getChildAt(i);				disp.parent.removeChild(disp);				disp = null;			}		}										 				/******************************************		XML		*******************************************/				private function loadData()		{			var dataURL:URLRequest = new URLRequest(xmlAsset);			var xmlLoader:URLLoader = new URLLoader(dataURL);			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			dataXML.ignoreWhitespace = true;			dataXML.ignoreProcessingInstructions = true;		} 				/////////////////////////////////////////////////////////////////////////////////////////////////////////////////XML PARSING LOGIC						private function xmlLoaded(event:Event) 		{									dataXML = new XML(event.currentTarget.data);						//var totalSections:Number = dataXML.elements().length();			//trace("LOADDATA :: total K:"+event.currentTarget.bytesTotal);			//trace("TOTAL FIRST NODES==================================================:"+totalSections); 						initBG();		}			}}