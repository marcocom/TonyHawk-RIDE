package com.thride.home{	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;		import flash.net.URLRequest;		import flash.geom.Point;			import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.geom.Rectangle;		import flash.utils.Timer;		import com.asual.swfaddress.*;	import gs.TweenLite;	import gs.easing.*;		public class MainPromo extends MovieClip	{		private static const PLAYER_LOC:String = "swf/home_vplayer.swf";				public var id:String;				public var currentSelect:Number;				private var navArr:Array = new Array();				public var isOpen:Boolean;		public var isOver:Boolean;		private var isRollOut:Boolean = true;		private var firstloaded:Boolean;				public var maskClip:MovieClip;		public var darkClip:MovieClip;		public var imgClip:MovieClip;		private var hitClip:MovieClip;		private var butClip:MovieClip;		private var videoBut:MovieClip;		private var vPlayer:MovieClip;				private var imgLoader:Loader;				private var imgTimer:Timer = new Timer(4000, 1);				private var dataList:XMLList;						private static const DARKALPHA:Number = .7;				public function MainPromo()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);		}						public function init()		{			//trace(">>>>>>>>>>>MAINPROMO :"+dataList.elements().length());						initButs();			applyButton();			selectAction(0);			imgTimer.addEventListener(TimerEvent.TIMER_COMPLETE, nextRequest);		}				private function initButs()		{			if(!butClip){				butClip = getChildByName("butclip") as MovieClip;				butClip.x = 450;				butClip.y = 290;				for(var i:int; i < dataList.elements().length(); i++){					var mc:WheelBut = new WheelBut();					mc.x = butClip.width + 10;					butClip.addChild(mc);					mc.link = i;					navArr.push(mc);										mc.addEventListener(MouseEvent.CLICK, butClick);					mc.buttonMode = true;										if(i == 0) mc.gotoAndStop(2);				}			}		}				private function butClick(e:MouseEvent)		{			trace("[[[BUTCLICK]]] index:"+e.currentTarget.link);			var n:Number = Number(e.currentTarget.link);			selectAction(n);			dataList.image[n].@isVideo == "false" && !isOpen ? imgTimer.reset() : imgTimer.stop();		}				private function selectAction(num:Number)		{			if(num != currentSelect){				for(var i:int; i < navArr.length; i++){					var mc:MovieClip = navArr[i];					i != num ? mc.gotoAndStop(1) : mc.gotoAndStop(2);				}				currentSelect = num;								loadImage(dataList.image[currentSelect].@asset);							}					}				private function nextRequest(e:TimerEvent)		{							var k:Number = (currentSelect+1) < navArr.length ? (currentSelect+1) : 0;				imgTimer.stop();				selectAction(k);		}				private var lastLoad:Sprite;		private function loadImage(asset:String)		{						imgLoader = new Loader();			imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imgPlayerLoaded);			imgLoader.load(new URLRequest(asset));		}				private function imgPlayerLoaded(e:Event)		{						var img:Sprite = new Sprite();			img.addChild(e.currentTarget.content)						imgClip.addChild(img);			img.alpha = 0;			if(lastLoad && firstloaded) lastLoad.parent.removeChild(lastLoad);			lastLoad = img;			TweenLite.to(img, .5, {alpha:1, ease:Strong.easeIn, onComplete:loadedFinish});			imgTimer.start();						if(dataList.image[currentSelect].@isVideo != "false"){				showButton();								hitClip.removeEventListener(MouseEvent.CLICK, deepLink);				hitClip.buttonMode = false;			} else {				killButton();				hitClip.addEventListener(MouseEvent.CLICK, deepLink);				hitClip.buttonMode = true;			}		}						private function deepLink(e:MouseEvent){			trace("CLICK FROM MAINPROMO");			SWFAddress.setValue(dataList.image[currentSelect].@deeplink);		}				private function loadedFinish()		{							//if(lastLoad && firstloaded) lastLoad.parent.removeChild(lastLoad);				firstloaded = true;		}												public function darkness(goDark:Boolean)		{			TweenLite.killTweensOf(darkClip);			TweenLite.to(darkClip, 1, {alpha:(goDark ? DARKALPHA : 0), ease:Strong.easeOut});		}												////////////////////////////////////////////////VIDEO BUT AND CONTENT		private function applyButton(){									var src:String = dataList.@butasset;						videoBut = getChildByName("vidbutclip") as MovieClip;			//addChild(videoBut);						videoBut.x = 30;			videoBut.y = 200;						videoBut.buttonMode = true;			videoBut.addEventListener(MouseEvent.CLICK, vidButClick);			videoBut.visible = false;						//trace("INITIMG : "+src);			var titlegfx:Loader = new Loader();			titlegfx.contentLoaderInfo.addEventListener(Event.COMPLETE, initButton);			titlegfx.load(new URLRequest(src));				}				private function initButton(e:Event)		{			videoBut.addChild(e.currentTarget.content);		}		private function showButton(){			trace("SHOWBUTTON vid.w:"+videoBut.width);			videoBut.visible = true;			TweenLite.from(videoBut, .5, {alpha:0});		}				private function killButton(){				videoBut.visible = false;		}				private function vidButClick(e:MouseEvent){			imgTimer.stop();			var contentLoader:Loader = new Loader();			contentLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, initContent);			contentLoader.load(new URLRequest(PLAYER_LOC));		}						private function initContent(e:Event)		{			vPlayer = e.currentTarget.content as MovieClip;			vPlayer.x = -5;						this.addChild(vPlayer);						vPlayer.init(dataList.@flv, closeMovie);					}								/////////////////////////////////////////CLOSEBUT				public function closeMovie()		{			vPlayer.close();			vPlayer.parent.removeChild(vPlayer);			vPlayer = null;			imgTimer.reset();			imgTimer.start();		}						////////////////////////////////////////ANIMS				public function overAnim()		{			if(!isOpen){				darkness(true);				this.gotoAndPlay("over");			}		}		public function outAnim()		{			isOpen = false;			darkness(false);			this.gotoAndPlay("out");		}				public function openAnim()		{			isOpen = true;										}				public function closeAnim(){			isOpen = false;			this.gotoAndStop(1);		}				//////////GETSET				public function set datalist(xml:XMLList)		{			dataList = xml;			init();		}				////////CONSTRUCT				public function onAdded(e:Event)		{			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);			imgClip = getChildByName("dynclip") as MovieClip;			darkClip = getChildByName("dark") as MovieClip;			darkClip.mouseEnabled = false;			hitClip = getChildByName("hit") as MovieClip;			darkness(false);		}				private function onRemoved(e:Event){			imgTimer.stop(); 			imgTimer = null;					}			}}