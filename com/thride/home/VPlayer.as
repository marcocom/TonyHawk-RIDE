package com.thride.home{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.Loader;		import flash.text.TextField;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;		import flash.external.ExternalInterface;			import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.events.FullScreenEvent;		import flash.system.Capabilities;		import flash.events.ProgressEvent;	import flash.media.SoundTransform;		import flash.utils.Timer;	import flash.media.SoundMixer;		import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.geom.Rectangle;    import flash.xml.XMLDocument;    import flash.xml.XMLNode;    import flash.xml.XMLNodeType;		import fl.transitions.Tween;	import fl.transitions.easing.*;		import com.dynamicflash.util.Base64;	import com.thride.Global;	import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });		public class VPlayer extends MovieClip	{				public var isPlaying:Boolean;				public var _vidSeekTime:Number;				// Video Seek Time		public var _vidCurrTime:Number;				// Video Current Time								public var _vidDuration:Number;				public var _soundTransform:SoundTransform;	// Sound Transformer		public var _lastSoundValue:Number = 1;		// Last Sound Value						public var xmlLoc:String;		public var navTitle:String;		public var currentSubSection:String;		public var dataArr:Array = new Array();		public var dataXML:XML = new XML();						//public var CLIENTWIDTH:Number = Capabilities.screenResolutionX;		//public var CLIENTHEIGHT:Number = Capabilities.screenResolutionY;				public var VID_WIDTH:Number = 700;  //stage.stageWidth;		public var VID_HEIGHT:Number = 400; //stage.stageHeight;				public var maskClip:Sprite;				public var bottomBarMC:MovieClip;				public var playButMC:MovieClip;		public var scrubBarMC:MovieClip;		public var scrubFillMC:MovieClip;		public var audioButMC:MovieClip;		public var audioBarMC:MovieClip;		public var audioFillMC:MovieClip;		public var audioDragMC:MovieClip;		public var closeButMC:MovieClip;				public var timeText:TextField;		public var titleText:TextField;				public var vidPlayer:VideoPlayback;						public var isMuted:Boolean = false;				public var isEmbedded:Boolean;		public var isFullScreen:Boolean = false;		public var controlsOpened:Boolean;				public var currentChoice:Number = 0;				public var callBack:Function;				private var videoAsset:String;				public function VPlayer()		{						trace("VPLAYER ADDED TO STAGE");			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);					}				public function onAddedToStage(event:Event)		{						isEmbedded = (parent != stage);						trace("VPLAYER ADDED TO STAGE isEmbedded:"+isEmbedded);			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						//VID_WIDTH = stage.stageWidth;			//VID_HEIGHT = stage.stageHeight;						bottomBarMC = getChildByName("bottom") as MovieClip;						playButMC = bottomBarMC.getChildByName("playBut") as MovieClip;						scrubBarMC = bottomBarMC.getChildByName("scrubBar") as MovieClip;			scrubFillMC = bottomBarMC.getChildByName("scrubFill") as MovieClip;			scrubFillMC.mouseEnabled = false;						audioButMC = bottomBarMC.getChildByName("audioBut") as MovieClip;			audioButMC.gotoAndStop(4);			audioBarMC = bottomBarMC.getChildByName("audioBar") as MovieClip;			audioFillMC = bottomBarMC.getChildByName("audioFill") as MovieClip;			audioDragMC = bottomBarMC.getChildByName("audioDrag") as MovieClip;			audioFillMC.mouseEnabled = false;									closeButMC = getChildByName("closebut") as MovieClip;			closeButMC.addEventListener(MouseEvent.CLICK, closeButAction);			closeButMC.buttonMode = true;					}								private function onRemovedFromStage(event:Event)		{			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			vidPlayer.unloadVid();		}				public function init($src:String, $call:Function)		{		 	assetTrack($src);			videoAsset = $src;			callBack = $call;			setupVideo(); //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<eval somehow if this is standalone or being driven HERE					}				private function assetTrack($asset:String)		{			var sendObj:URLVariables = new URLVariables();			sendObj.a = Base64.encode($asset);			sendObj.s = Base64.encode("THRIDE");			sendObj.t = Base64.encode("video");			sendObj.c = Base64.encode(Global.COUNTRY);						var request:URLRequest = new URLRequest(Global.ASSETTRACK);			request.method = URLRequestMethod.POST;			request.data = sendObj;			 			var loader:URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			 			try{				loader.load(request);			}			catch (error:Error) {				trace("Unable to load URL");			}		}		/*		var variables:URLVariables = new URLVariables();		variables.username = "ruliman";		variables.password= "123456";		//		trace(variables.toString());		var request:URLRequest = new URLRequest("somefile.php");		request.method = URLRequestMethod.POST;		request.data = variables;		 		var loader:URLLoader = new URLLoader();		loader.dataFormat = URLLoaderDataFormat.VARIABLES;		 		try{			loader.load(request);		}		catch (error:Error) {			trace("Unable to load URL");		}		*/				private function initVidControls()		{										playButMC.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);				playButMC.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);				playButMC.buttonMode = true;												audioButMC.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);				audioButMC.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);				audioButMC.buttonMode = true;						scrubBarMC.addEventListener(MouseEvent.MOUSE_OVER, barOverHandler);			scrubBarMC.addEventListener(MouseEvent.MOUSE_OVER, barOutHandler);			scrubBarMC.buttonMode = true;												playButMC.addEventListener(MouseEvent.CLICK, playButClick);			scrubBarMC.addEventListener(MouseEvent.CLICK, scrubBarClick);			audioButMC.addEventListener(MouseEvent.CLICK, audioButClick);			//audioBarMC.addEventListener(MouseEvent.CLICK, audioBarClick);						audioDragMC.addEventListener(MouseEvent.MOUSE_DOWN, audioDragDown);			this.addEventListener(MouseEvent.MOUSE_UP, audioDragUp);			audioDragMC.buttonMode = true;						scrubFillMC.scaleX = 1;			scrubBarMC.scaleX = 1;						addEventListener(Event.ENTER_FRAME, handleEnterFrame);															trace("VPLAYER---------DATAARR: length:"+dataArr.length+" test[0]:\n"+dataArr[0]);		}								public function close()		{			if (isPlaying)			{				vidPlayer.unloadVid();				if (hasEventListener(Event.ENTER_FRAME)) {					removeEventListener(Event.ENTER_FRAME, handleEnterFrame);				}			}								}																		public function setupVideo()		{			trace("VPLAYER = SETUPVIDEO()");			vidPlayer = new VideoPlayback( videoAsset, VID_WIDTH, VID_HEIGHT, _lastSoundValue, callBack );						addChild(vidPlayer);			vidPlayer.x = bottomBarMC.x;			vidPlayer.y = bottomBarMC.y - VID_HEIGHT;						initVidControls();			isPlaying = true;			//dispatchEvent(new VolumeEvent(VolumeEvent.MUTE, true, true, true));					}										/******************************************		**HANDLERS		*/				private function closeButAction(e:MouseEvent)		{			callBack();		}				private function playButClick(e:MouseEvent)		{			if(isPlaying){				e.target.gotoAndStop(2);				isPlaying = false;								vidPlayer.pauseVid();			} else {				e.target.gotoAndStop(1);				isPlaying = true;				vidPlayer.resumeVid()			}		}		private function scrubBarClick(e:MouseEvent)		{			var timechoice:Number = (scrubBarMC.mouseX/scrubBarMC.width) * vidPlayer.vidDuration;			vidPlayer.vidSeek(timechoice);			trace(timechoice);		}						private function audioButClick(e:MouseEvent)		{			if(!isMuted){				_lastSoundValue = 0;				isMuted = true;				audioButMC.gotoAndStop(1);				//audioFillMC.scaleX = 0;				audioDragMC.x = audioBarMC.x + (audioBarMC.width*_lastSoundValue);				vidPlayer.mute(true);							} else {				isMuted = false;								var playpoint:Number = Math.round((vidPlayer._volume)*4) + 1;				trace("VIDPLAYER.VOLUME:"+playpoint);				audioButMC.gotoAndStop(playpoint);				//audioFillMC.scaleX = vidPlayer._volume;				vidPlayer.mute(false);				audioDragMC.x = audioFillMC.x + (audioFillMC.width*vidPlayer._volume);							}		}												private function audioBarClick(e:MouseEvent)		{						_lastSoundValue = Math.round((audioBarMC.mouseX/audioBarMC.width)*100)*.01;			//audioFillMC.scaleX = _lastSoundValue;				audioDragMC.x = audioFillMC.x + (audioFillMC.width*audioFillMC.scaleX);			vidPlayer.setvolume(_lastSoundValue);			//var s:SoundTransform = new SoundTransform(_lastSoundValue, 0);			//vidPlayer.soundTransform = s;					var playpoint:Number = Math.round((_lastSoundValue)*4) + 1;			trace("VIDPLAYER.VOLUME:"+_lastSoundValue);			audioButMC.gotoAndStop(playpoint);		}				private function audioDragDown(e:MouseEvent)		{			var sRect:Rectangle = new Rectangle(audioBarMC.x, audioDragMC.y, audioBarMC.width, 0);			audioDragMC.startDrag(false, sRect);			audioDragMC.addEventListener(MouseEvent.MOUSE_MOVE, dragLogic);		}				private function audioDragUp(e:MouseEvent)		{			audioDragMC.stopDrag();			audioDragMC.removeEventListener(MouseEvent.MOUSE_MOVE, dragLogic);		}				private function dragLogic(e:MouseEvent)		{			var diff:Number = audioDragMC.x - audioBarMC.x;//(audioDragMC.x+(audioDragMC.width/2)) - audioBarMC.x;			var val:Number = (diff/audioBarMC.width) < 1 ? (diff/audioBarMC.width) : 1;			trace(val);			_lastSoundValue = val;			//audioFillMC.scaleX = _lastSoundValue;			vidPlayer.setvolume(val);			//var s:SoundTransform = new SoundTransform(_lastSoundValue, 0);			//vidPlayer.soundTransform = s;		}												private function onPlayEnd()		{					}				public function mouseOverHandler(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			//mc.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 123, 61, 21, .5);			TweenLite.to(mc, 1, { tint:0xCCCCCC, ease:Strong.easeOut});		}				public function mouseOutHandler(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			//mc.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 1, 1, 1, 1);			TweenLite.to(mc, 1, { tint:0xFF0000, ease:Strong.easeOut});		}		public function barOverHandler(e:MouseEvent)		{			trace("BAR OVER");			var c:ColorTransform =  new ColorTransform(1, 1, 1, 1, 255, 0, 0, 1);			scrubFillMC.transform.colorTransform = c;					}				public function barOutHandler(e:MouseEvent)		{			var c:ColorTransform =  new ColorTransform(1, 1, 1, 1, 1, 1, 1, 1);			scrubFillMC.transform.colorTransform = c;		}						private function handleEnterFrame(e:Event) {			if(vidPlayer.vidDuration > 0){				var percPlayed:Number = (vidPlayer.vidTime/vidPlayer.vidDuration);				var percLoaded:Number = vidPlayer.vidLoaded;								 scrubFillMC.scaleX = percPlayed;				 //scrubBarMC.scaleX = percLoaded*.01;				// if(scrubBarMC.scaleX < 1) scrubBarMC.scaleX -= (scrubBarMC.scaleX - (percLoaded*.01))*.2;				 				 var timeString:String = timeFormat(vidPlayer.vidTime) + " / "+ timeFormat(vidPlayer.vidDuration);				 //timeText.text = timeString;			}			//trace("vidDuration:"+vidPlayer.vidDuration+" vidTime:"+vidPlayer.vidTime+" percPlayed:"+percPlayed+" percLoaded:"+percLoaded);								}						public function set _embedded(s:Boolean){			isEmbedded = s;		}				public function set _callBack(f:Function){			callBack = f;		}												//****************UTILS		public function timeFormat ( time:Number ):String		{			var remainder:Number;						var hours:Number = time / ( 60 * 60 );						remainder = hours - (Math.floor ( hours ));						hours = Math.floor ( hours );						var minutes = remainder * 60;						remainder = minutes - (Math.floor ( minutes ));						minutes = Math.floor ( minutes );						var seconds = remainder * 60;						remainder = seconds - (Math.floor ( seconds ));						seconds = Math.floor ( seconds );						var hString:String = hours < 10 ? "0" + hours : "" + hours;				var mString:String = minutes < 10 ? "0" + minutes : "" + minutes;			var sString:String = seconds < 10 ? "0" + seconds : "" + seconds;									if ( time < 0 || isNaN(time)) return "00:00";												if ( hours > 0 )			{							return hString + ":" + mString + ":" + sString;			}else			{				return mString + ":" + sString;			}		}					}}