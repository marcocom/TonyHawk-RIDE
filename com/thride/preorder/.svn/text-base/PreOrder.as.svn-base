package com.thride.preorder{	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.DisplayObject;		import flash.events.Event;	import flash.events.MouseEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormatAlign;		import flash.utils.Timer;		import flash.geom.Rectangle;		import fl.controls.ComboBox; 	import fl.data.DataProvider; 	import fl.events.ComponentEvent;  	import com.thride.Global;	import com.thride.NavEvent;	import gs.TweenLite;	import gs.easing.*;			public class PreOrder extends MovieClip	{		private static const IMAGE_WIDTH:Number = 300;		private static const IMAGE_HEIGHT:Number = 160;		private static const COLUMN_COUNT:Number = 3;		private static const MENU_OUTERMARGIN_X:Number = 0;		private static const MENU_OUTERMARGIN_Y:Number = 0;		private static const IMGCLIP_Y:Number = 180; //start point				private var navSpacerX:Number = 40;		private var navSpacerY:Number = 20;				private var country:String = Global.COUNTRY;				private var imgLoader:Loader;		private var imgClip:Sprite;		private var bgClip:MovieClip;		private var titleTxt:MovieClip;				private var xmlList:XMLList;		private var dataXML:XML = new XML();		private var xmlloader:Loader;				private var navArr:Array;		private var elementArr:Array;				private var xmlAsset:String;				private var totalThumbs:Number;				public function PreOrder()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);				}		////////CONSTRUCT						private function onAdded(e:Event)		{						visible = false;			trace("PREORDER ADDED TO STAGE");			bgClip = getChildByName("bgclip") as MovieClip;			removeEventListener(Event.ADDED_TO_STAGE, onAdded);			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);		}				private function onRemoved(e:Event){						delete this;		}				public function init($xmlsrc:String)		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);			xmlAsset = $xmlsrc;			loadData();		}				public function initClips()		{						titleTxt = getChildByName("titledyn") as MovieClip;			loadGraphic(dataXML.@asset, titleTxt)			imgClip = new Sprite();			addChild(imgClip);			imgClip.x = titleTxt.x; 			imgClip.y = IMGCLIP_Y;						initImages();			initComboBox();		}						private function initComboBox(){						var menuList:Array = new Array();			for(var i:int; i < dataXML.elements().length(); i++){				var s:Object = {						label:dataXML.country[i].@title, 						data:dataXML.country[i].@id						};				menuList.push(s);							}									var aCb:ComboBox = new ComboBox(); 			aCb.dropdownWidth = 210; 			aCb.width = 220;			aCb.x = titleTxt.x;			aCb.y = 100;						aCb.prompt = dataXML.country[0].@title; 			aCb.dataProvider = new DataProvider(menuList);			aCb.addEventListener(Event.CHANGE, changeHandler);						addChild(aCb); 						function changeHandler(event:Event):void { 				var l:String = ComboBox(event.target).selectedItem.label;				var id:String = ComboBox(event.target).selectedItem.data; 				trace("COMBOBOX SELECT:"+l+" id:"+id);				country = id;				initImages();			}		}										private function initImages()		{			var ref:Number;						for (var k:int; k < dataXML.elements().length(); k++) {				if (dataXML.country[k].@id == country) ref = k;			}			totalThumbs = dataXML.country[ref].elements().length();			trace("INITIMAGES - total:" + totalThumbs+" country:"+country);						if(navArr){				for (var n:int; n < navArr.length; n++) {					navArr[n].parent.removeChild(navArr[n]);				}			}						navArr = [];			for (var i:int; i < totalThumbs; i++){								var mc:MovieClip = new MovieClip();				var asset:String = dataXML.country[ref].vendor[i].@asset;				var url:String = dataXML.country[ref].vendor[i].@url;												loadLogo(asset, mc, i);				imgClip.addChild(mc);								var div_x:Number = i % COLUMN_COUNT;				var div_y:Number = Math.floor(i / COLUMN_COUNT);				trace("IMAGE:" + i + " div_x:" + div_x+" div_y:"+div_y);				mc.x = (div_x * (IMAGE_WIDTH + navSpacerX)) ;//+ MENU_OUTERMARGIN_X;				mc.y = (div_y * (IMAGE_HEIGHT + navSpacerY));//+ MENU_OUTERMARGIN_Y;				mc.link = url;				mc.id = i;				//mc.y = i*(IMAGE_HEIGHT + navSpacer);				navArr.push(mc);				trace("NEW THUMB :"+i+": asset:"+asset+" mc:"+mc);				mc.addEventListener(MouseEvent.CLICK, linkOut);				mc.buttonMode = true;							}					}				private function linkOut(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			var url:String = mc.link;			trace("LINKOUT :" + url);			dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, true, url));		}								private function loadLogo(asset:String,mc:MovieClip, i:Number)		{						var l = new Loader();			function finishload(e:Event){								mc.addChild(e.currentTarget.content);								var xpos:Number;				var ypos:Number;								xpos = i % 2 > 0 ? xpos = Global.SWFWIDTH : xpos = -mc.width; 				ypos = (Math.random()*600)+200;				TweenLite.from(mc, ((i+1)*.1), {x:xpos, y:ypos, rotation:-5, ease:Bounce.easeOut});							}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}						private function loadGraphic(asset:String, target:*)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function popTxt(txt:String, target:MovieClip)		{			var field:TextField = target.getChildByName("txt") as TextField;			field.htmlText = txt;		}				//////////////////////////////////////////Handlers																 				/******************************************		XML		*******************************************/				private function loadData()		{			var dataURL:URLRequest = new URLRequest(xmlAsset);			var xmlLoader:URLLoader = new URLLoader(dataURL);			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			dataXML.ignoreWhitespace = true;			dataXML.ignoreProcessingInstructions;		} 				private function xmlLoaded(event:Event) 		{									dataXML = new XML(event.currentTarget.data);						var totalSections:Number = dataXML.elements().length();			trace("LOADDATA :: total K:"+event.currentTarget.bytesTotal);			trace("TOTAL FIRST NODES==================================================:"+totalSections); 			TweenLite.from(bgClip, .5, {x:Global.SWFWIDTH, ease:Bounce.easeOut, onComplete:initClips});			//initClips();			visible = true;		}			}}