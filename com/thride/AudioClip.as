package com.thride{		import flash.display.MovieClip;	import flash.display.Sprite;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundMixer;	import flash.media.SoundTransform;		import flash.net.URLRequest;		import flash.events.Event;	import flash.events.MouseEvent;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.geom.Rectangle;		import com.thride.Global;	import com.thride.AudioEvent;	import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });			public class AudioClip extends MovieClip	{		private var dataXML:XMLList;				private var playBut:MovieClip;		private var rewindBut:MovieClip;		private var ffBut:MovieClip;		private var volClip:MovieClip;				private var txtField:TextField;				private var _sound:Sound;		private var _channel:SoundChannel;				private var sTrans:SoundTransform;						private var _playList:Array = new Array();		private var _index:Number = 0;				private var pausePoint:Number;				private var isPlaying:Boolean;		private var isRequestedOff:Boolean = false;				private var musicVolume:Number;		private var vcheck:Boolean;				private var maskClip:Sprite;				private static var inst:AudioClip;				public function AudioClip()		{			addEventListener(Event.ADDED_TO_STAGE, onAdded);			inst = this;		}				private function onAdded(e:Event)		{			sTrans = new SoundTransform(1, 0);					}				public function init(xml:XMLList)		{			dataXML = xml;			initMusic();		}				public function test(){			trace("AUDIOCLIP GOT THIS");		}				public function initMusic()		{			trace("INITMUSIC : total:"+dataXML.elements().length());									playBut = getChildByName("playpausebut") as MovieClip;			rewindBut = getChildByName("rewindbut") as MovieClip;			ffBut = getChildByName("forwardbut") as MovieClip;			volClip = getChildByName("volclip") as MovieClip;			txtField = getChildByName("titletxt") as TextField;			txtField.autoSize = TextFieldAutoSize.LEFT			maskClip = getChildByName("maskclip") as Sprite;						txtField.mask = maskClip;						volClip.addEventListener(MouseEvent.CLICK, playButAction);			volClip.buttonMode = true;			playBut.addEventListener(MouseEvent.CLICK, playButAction);			playBut.buttonMode = true;			ffBut.addEventListener(MouseEvent.CLICK, nextSong);			ffBut.buttonMode = true;			rewindBut.addEventListener(MouseEvent.CLICK, prevSong);			rewindBut.buttonMode = true;			//addEventListener(Event.ENTER_FRAME, EnterFrame);						Global._stage.addEventListener(AudioEvent.TOGGLE, stateToggle);		}				private function scrollName()		{			trace("SCROLLNAME");			TweenLite.to(txtField, 4, {x:(maskClip.x-txtField.textWidth), ease:Linear.easeNone, onComplete:resetScroll});		}				private function resetScroll(){			txtField.x = maskClip.x + maskClip.width;			TweenLite.to(txtField, 6, {x:(maskClip.x-txtField.textWidth), ease:Linear.easeNone, onComplete:resetScroll});		}				private function nextSong(e:MouseEvent) {						_index < (dataXML.elements().length()-1) ? _index++ : _index = 0;						trace("NEXTSONG : "+_index+" name:"+dataXML.song[_index].@title);						playSong();		}						private function prevSong(e:MouseEvent) {						_index == 0 ? _index = dataXML.elements().length()-1  : _index--;						trace("PrevSONG : "+dataXML.song[_index].@title);						playSong();		}						public function playSong()		{			var asset:String = dataXML.song[_index].@asset;			playBut.gotoAndStop(1);			volClip.gotoAndStop(volClip.totalFrames);			isPlaying = true;			txtField.text = dataXML.song[_index].@title;			trace("PLAY SONG : "+asset+" txt.w:"+txtField.textWidth+" mask.w:"+maskClip.width);			if(txtField.textWidth > maskClip.width) scrollName();									if(_channel){				_channel.stop();				_channel = null;				_sound = null;			}				_sound = new Sound();				_sound.load(new URLRequest(asset));				_channel = _sound.play();				_channel.addEventListener(Event.SOUND_COMPLETE, onSongComplete);		}						private function playButAction(e:MouseEvent){			if(isPlaying){				pausePoint = _channel.position;				_channel.stop();				playBut.gotoAndStop(2);				volClip.gotoAndStop(1);				isPlaying = false				isRequestedOff = true;			} else {				isPlaying = true;				pausePoint ? _channel = _sound.play(pausePoint) : _channel = _sound.play();								_channel.addEventListener(Event.SOUND_COMPLETE, onSongComplete);								playBut.gotoAndStop(1);				volClip.gotoAndStop(volClip.totalFrames);				isRequestedOff = false;			}		}				private function setVolume(vol:Number)		{				var s = new SoundTransform(vol, 0);				s.volume = vol;				_channel.soundTransform = s;				trace("NEW VOLUME:"+vol);					}				private function onSongComplete(e:Event)		{			nextSong(null);		}						public function stateToggle(e:AudioEvent)		{			trace("SOUND TOGGLE:"+e.values[0]);			if(e.values[0] == true){				if(!isRequestedOff) playSong();			} else {				if(_channel){					_channel.stop();					//_channel = null;					//_sound = null;				}				playBut.gotoAndStop(2);				volClip.gotoAndStop(1);							}		}				private function volumeSelect(e:Event){					}				private function EnterFrame(e:Event)		{			/*			if(vcheck != Global.BG_TOGGLE){				vcheck = Global.BG_TOGGLE;				stateToggle(vcheck);			}			*/		}	}}