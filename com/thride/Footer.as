package com.thride{		import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.DisplayObject;		import flash.events.Event;	import flash.events.MouseEvent;		import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.net.URLLoader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormatAlign;		import flash.utils.Timer;		import flash.geom.Rectangle;	 	import com.dynamicflash.util.Base64;	import com.thride.Global;	import com.thride.NavEvent;	import gs.TweenLite;	import gs.easing.*;			public class Footer extends MovieClip	{		private static const LOGOSPACE:Number = 180;				private static const PLATFORMSPACE:Number = 150;				private var dataXML:XMLList;						private var logoClipOff:Sprite;		private var logoClipOn:Sprite;		private var navClip:Sprite;		private var bgClip:Sprite;		private var openBut:MovieClip;		private var closeBut:MovieClip;		private var disclaimerTxt:TextField;				private var logosSpacer:Number = 20;				public function Footer()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);		}				public function init($list:XMLList)		{				dataXML = $list;				//trace("FOOTER INIT:"+ dataXML.elements().length());								bgClip = getChildByName("bgclip") as Sprite;				openBut = bgClip.getChildByName("openbut") as MovieClip;				closeBut = bgClip.getChildByName("closebut") as MovieClip;				disclaimerTxt = getChildByName("disclaimertxt") as TextField;								closeBut.visible = false;				disclaimerTxt.visible = false;								initOffImages()				initOnImages()				initTextNav();				initBut();		}				private function initBut()		{			popTxt(dataXML.@cta, openBut);			openBut.addEventListener(MouseEvent.CLICK, openUp);			openBut.buttonMode = true;			var arrowsClip:MovieClip = openBut.getChildByName("arrows") as MovieClip;			arrowsClip.x = openBut.txt.textWidth+5;			var hit:Sprite = openBut.getChildByName("hit") as Sprite;			hit.width = arrowsClip.x;			openBut.x = (Global.NATIVEWIDTH/2) - (openBut.width/2);						popTxt(dataXML.@closetxt, closeBut);			closeBut.addEventListener(MouseEvent.CLICK, closeUp);			closeBut.buttonMode = true;			var arrowsClip1:MovieClip = closeBut.getChildByName("arrows") as MovieClip;			arrowsClip1.x = closeBut.txt.textWidth+5;			var hit1:Sprite = closeBut.getChildByName("hit") as Sprite;			hit1.width = arrowsClip1.x;			closeBut.x = (Global.NATIVEWIDTH/2) - (closeBut.width/2);					}				private function openUp(e:Event)		{			openBut.visible = false;			function appear(){				disclaimerTxt.htmlText = dataXML.disclaimer.valueOf();				disclaimerTxt.visible = true;				closeBut.visible = true;				closeBut.buttonMode = true;				closeBut.addEventListener(MouseEvent.CLICK, closeUp);				logoClipOn.visible = true;			}			TweenLite.to(bgClip, 1, {y:-133, ease:Strong.easeInOut, onComplete:appear});			var mc:Sprite = bgClip.getChildByName("bg_off") as Sprite;			TweenLite.to(mc, .5, {alpha:0, ease:Strong.easeOut});		}				private function closeUp(e:MouseEvent)		{			disclaimerTxt.visible = false;			closeBut.visible = false;			logoClipOn.visible = false;			function appear(){				openBut.visible = true;				var mc:Sprite = bgClip.getChildByName("bg_off") as Sprite;				TweenLite.to(mc, .5, {alpha:1, ease:Strong.easeOut});			}			TweenLite.to(bgClip, 1, {y:0, ease:Strong.easeInOut, onComplete:appear});		}				private function initTextNav()		{			navClip = new Sprite();			var total:Number = dataXML.links.elements().length();			for(var i:int; i < total; i++){				var mc:textlinkclip = new textlinkclip();				var txt:TextField = mc.getChildByName("txt") as TextField;				var hit:MovieClip = mc.getChildByName("hit") as MovieClip;				var url:String = dataXML.links.link[i].@url;				txt.autoSize = TextFieldAutoSize.LEFT				i < (total-1) ?					txt.htmlText = dataXML.links.link[i].valueOf() + "  /" :					txt.htmlText = dataXML.links.link[i].valueOf();				//txt.width = txt.textWidth;				//hit.width = txt.textWidth;				mc.x = navClip.width + 5;				mc.link = url;				mc.id = i;				var h:Sprite = mc.getChildByName("hit") as Sprite;				h.width = txt.textWidth;				navClip.addChild(mc);				mc.addEventListener(MouseEvent.CLICK, linkOutRelational);				mc.buttonMode = true;			}			addChild(navClip);			navClip.x = (Global.NATIVEWIDTH/2) - (navClip.width/2);			navClip.y = 35;					}				private function initOnImages()		{			var totalThumbs:Number = dataXML.platforms.elements().length();			logoClipOn = new Sprite();			for (var i:int; i < totalThumbs; i++){								var mc:MovieClip = new MovieClip();				var asset:String = dataXML.platforms.logo[i].@asset;				var url:String = dataXML.platforms.logo[i].@url;								mc.x = (i*(PLATFORMSPACE + logosSpacer));				loadOnGraphic(asset, mc);												mc.link = url;				mc.id = i;				//mc.y = i*(IMAGE_HEIGHT + navSpacer);				//trace("NEW THUMB :"+i+": asset:"+asset+" mc:"+mc);				mc.addEventListener(MouseEvent.CLICK, linkOut);				mc.buttonMode = true;							}			logoClipOn.visible = false;			addChild(logoClipOn);			logoClipOn.x = (Global.NATIVEWIDTH/2) - ((totalThumbs*PLATFORMSPACE)/2);			logoClipOn.y = -110;		}								private function initOffImages()		{			var totalThumbs:Number = dataXML.logos.elements().length();			logoClipOff = new Sprite();			for (var i:int; i < totalThumbs; i++){								var mc:MovieClip = new MovieClip();				var asset:String = dataXML.logos.logo[i].@asset;				var url:String = dataXML.logos.logo[i].@url;												loadGraphic(asset, mc);				mc.x = i*(LOGOSPACE + logosSpacer);				logoClipOff.addChild(mc);								mc.link = url;				mc.id = i;				//mc.y = i*(IMAGE_HEIGHT + navSpacer);				trace("NEW THUMB :"+i+": asset:"+asset+" mc:"+mc);				mc.addEventListener(MouseEvent.CLICK, linkOutRelational);				mc.buttonMode = true;			}						addChild(logoClipOff);			logoClipOff.x = (Global.NATIVEWIDTH/2)  - ((totalThumbs*LOGOSPACE)/2);			logoClipOff.y = 55;		}				private function linkOutRelational(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			var url:String = mc.link;			trace("LINKOUT :" + url);			if(url != "http://www.esrb.org/ratings/ratings_guide.jsp"){				linkTrack(url);				//navigateToURL(new URLRequest(url), "_blank");			} else {			dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, true, url));			}		}						private function linkTrack($url:String)		{			//get.php?a=" +  Base64.encode(e.target.link) + "&d=\"THXI Preorder\"&t=\"THXI Preorder\"" + "','" + e.target.text			var sendString:String = Global.LINKTRACK+"?a=" + Base64.encode($url) + "&d=" + Base64.encode(Global.COUNTRY) + "&t=" + Base64.encode("THRIDE");			trace("TRACK:"+sendString);			navigateToURL(new URLRequest(sendString), "_blank");		}						private function linkOut(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			var url:String = mc.link;			trace("LINKOUT :" + url);			dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, true, url));		}						private function loadOnGraphic(asset:String, target:*)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				target.x -= (target.width/2);				logoClipOn.addChild(target);			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function loadGraphic(asset:String, target:*)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function popTxt(txt:String, target:MovieClip)		{			var field:TextField = target.getChildByName("txt") as TextField;			field.autoSize = TextFieldAutoSize.LEFT;			field.htmlText = txt;		}						///////////////////////////////////////////////////NAV												private function onAdded(e:Event)		{					}			}}