package com.thride.game{	import flash.display.Stage;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;		import flash.events.Event;	import flash.events.MouseEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.utils.Timer;		import flash.geom.Rectangle;		import com.thride.Global;			import gs.TweenLite;	import gs.easing.*;	import com.asual.swfaddress.*;				public class Game extends MovieClip	{				private var xmlList:XMLList;		private var dataXML:XML = new XML();		private var xmlloader:Loader;				private var navArr:Array;		private var elementArr:Array;				private var xmlAsset:String;				private var bgClip:MovieClip;		private var titleClip:MovieClip;		private var contentClip:MovieClip;				private var currentSection:String;		private var currentContent:*;				private var topnavClip:TopNav;						public function Game()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);					}		////////CONSTRUCT				private function onAdded(e:Event)		{			visible = false;			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);			SWFAddress.addEventListener(SWFAddressEvent.CHANGE, addressChange);			bgClip = getChildByName("bgclip") as MovieClip;						titleClip = getChildByName("titledyn") as MovieClip;			contentClip = getChildByName("contentdyn") as MovieClip;		}				public function init($xmlsrc:String)		{									xmlAsset = $xmlsrc;			loadData();		}						///////////////////////////////////BG				private function initBG()		{						loadGraphic(dataXML.title.@asset, titleClip);						topnavClip = new TopNav(dataXML.nav)			addChild(topnavClip);			topnavClip.x = titleClip.x - 5;			topnavClip.y = titleClip.y + 40;									checkDeepLink();					}						private function checkDeepLink()		{						var arr:Array = SWFAddress.getPathNames();			if(arr.length == 1){ 				SWFAddress.setValue("game/info"); 			} else {				refData(arr[1]);			}		}								private function loadGraphic(asset:String, target:MovieClip)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function popTxt(txt:String, target:MovieClip)		{			var field:TextField = target.getChildByName("txt") as TextField;			field.htmlText = txt;		}						/////////////////////////////////////HANDLERS														/////////SWFADDRESS				private function addressChange(e:SWFAddressEvent)		{			//e.value == "/" ? homeNavigate(null) : navAction(e.value);			var arr:Array = SWFAddress.getPathNames();			if(arr.length > 1){ 				refData(arr[1]);			}			trace("\n\nGAME --- ADDRESS CHANGE name:"+e.value+" ARR: length:"+arr.length+" vals:"+arr[(arr.length-1)]);			//if(arr.length < 4) refData(arr[1]);					}		 private function refData(ref:String)		{			trace("REFDATA:"+ref);						for(var i:int; i < dataXML.nav.elements().length(); i++){				//trace("-- id:"+navList.section[i].@id);				if(dataXML.nav.section[i].@id == ref){										trace(dataXML.nav.section[i].valueOf());					var vals:Array = [									  dataXML.nav.section[i].@id,									  dataXML.nav.section[i].valueOf()									  ];									}			}						if(ref != currentSection){				loadSubLevel(vals[0]);				//SWFAddress.setTitle(("GAME :: "+vals[1]));				currentSection = ref;							}		}				private function loadSubLevel(id:String)		{			if(currentContent){ 				currentContent.parent.removeChild(currentContent);				currentContent = null;				for (var i:int; i < contentClip.numChildren; i++){					var mc:* = contentClip.getChildAt(i);					contentClip.removeChild(mc);					mc = null;				}			}			if(id == "info"){				var mcv:Info = new Info();				contentClip.addChild(mcv);				mcv.init(dataXML.info);				currentContent = mcv;			} else if(id == "partners"){				var mcs:Partners = new Partners();				contentClip.addChild(mcs)				mcs.init(dataXML.partners);				currentContent = mcs;			} /*else if(id == "wallpapers"){				var mcw:wallsContainer = new wallsContainer();				contentClip.addChild(mcw);				mcw.init(dataXML.wallpapers);				currentContent = mcw;			} else if(id == "icons"){				var mci:iconsContainer = new iconsContainer();				contentClip.addChild(mci);				mci.init(dataXML.icons);				currentContent = mci;			}*/					}				private function onRemoved(e:Event){			SWFAddress.removeEventListener(SWFAddressEvent.CHANGE, addressChange);		}				/******************************************		XML		*******************************************/				private function loadData()		{			var dataURL:URLRequest = new URLRequest(xmlAsset);			var xmlLoader:URLLoader = new URLLoader(dataURL);			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			dataXML.ignoreWhitespace = true;			dataXML.ignoreProcessingInstructions;		} 							private function xmlLoaded(event:Event) 		{									dataXML = new XML(event.currentTarget.data);						var totalSections:Number = dataXML.elements().length();			trace("LOADDATA :: total K:"+event.currentTarget.bytesTotal);			trace("TOTAL FIRST NODES==================================================:"+totalSections); 									TweenLite.from(bgClip, .5, {x:Global.SWFWIDTH, ease:Bounce.easeOut, onComplete:initBG});			visible = true;		}			}}