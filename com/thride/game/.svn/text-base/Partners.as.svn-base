package com.thride.game{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.Loader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.net.URLLoader;	import flash.net.URLRequest;		import flash.events.Event;	import flash.events.MouseEvent;		import flash.system.Capabilities;		import flash.geom.Rectangle;	import com.thride.Global;	import com.thride.NavEvent;	import gs.TweenLite;	import gs.easing.*;		public class Partners extends MovieClip	{						private static const IMAGE_WIDTH:Number = 220;		private static const IMAGE_HEIGHT:Number = 135;		private static const COLUMN_COUNT:Number = 3;		private static const MENU_OUTERMARGIN_X:Number = 40;		private static const MENU_OUTERMARGIN_Y:Number = 0;				private var navSpacerX:Number = 40;		private var navSpacerY:Number = 40;				private var country:String = Global.COUNTRY;				private var imgLoader:Loader;		private var imgClip:Sprite;		private var maskClip:Sprite;				private var prevButMC:MovieClip;		private var nextButMC:MovieClip;		private var subTitleClip:MovieClip;				private var dataXML:XMLList;		private var navArr:Array;				private var currentSet:Number = 0;		private var currentChoice:Number = 0;				private var visibleThumbs:Number = 2; //stacked						private var totalThumbs:Number;				private var imagecount:Number = -1;						public function Partners()		{			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				private function onAddedToStage(event:Event)		{						prevButMC = getChildByName("arrow_up") as MovieClip;			nextButMC = getChildByName("arrow_dn") as MovieClip;						addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);		}		public function init($dataXML:XMLList)		{												dataXML = $dataXML;						trace("INIT THUMBNAV total:"+totalThumbs);						imgClip = new Sprite();			navArr = new Array();			addChild(imgClip);			maskClip = getChildByName("maskclip") as MovieClip;			imgClip.x = maskClip.x; imgClip.y = maskClip.y;			subTitleClip = getChildByName("subtitle_txt") as MovieClip;			popTxt(dataXML.title.valueOf(), subTitleClip);			addChild(maskClip);			imgClip.mask = maskClip;			initImages();					}						private function initImages()		{			var ref:Number;						for (var k:int; k < dataXML.countries.elements().length(); k++) {				if (dataXML.countries.country[k].@id == Global.COUNTRY) ref = k;			}			totalThumbs = dataXML.logos.elements().length();			trace("INITIMAGES - total:" + totalThumbs);						if (imgClip.numChildren > 0) {				for (var n:int; n < imgClip.numChildren; n++) {					var img:DisplayObject = imgClip.getChildAt(n);					imgClip.removeChild(img);					img = null;				}			}									for (var i:int; i < totalThumbs; i++){								var mc:MovieClip = new MovieClip();				var asset:String = dataXML.logos.partner[i].@asset;				var url:String = dataXML.logos.partner[i].@url;												loadGraphic(asset, mc);				imgClip.addChild(mc);								var div_x:Number = i % COLUMN_COUNT;				var div_y:Number = Math.floor(i / COLUMN_COUNT);				trace("IMAGE:" + i + " div_x:" + div_x+" div_y:"+div_y);				mc.x = (div_x * (IMAGE_WIDTH + navSpacerX)) + MENU_OUTERMARGIN_X;				mc.y = (div_y * (IMAGE_HEIGHT + navSpacerY))+ MENU_OUTERMARGIN_Y;				mc.link = url;				//mc.y = i*(IMAGE_HEIGHT + navSpacer);								trace("NEW THUMB :"+i+": asset:"+asset+" mc:"+mc);				mc.addEventListener(MouseEvent.CLICK, linkOut);				//mc.addEventListener(MouseEvent.ROLL_OVER, linkRollOver);				//mc.addEventListener(MouseEvent.ROLL_OUT, linkRollOut);				mc.buttonMode = true;				navArr.push(mc);			}			if(((totalThumbs/COLUMN_COUNT)*(IMAGE_HEIGHT+navSpacerY)) > maskClip.height) initArrows();					}				private function linkRollOver(e:MouseEvent){						var mc:MovieClip = e.currentTarget as MovieClip;			TweenLite.killTweensOf(mc);			TweenLite.to(mc, .5, {rotation:-2, ease:Bounce.easeIn});		}		private function linkRollOut(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			mc.rotation = 0;		}				private function linkOut(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			var url:String = mc.link;			trace("LINKOUT :" + url);			dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, true, url));		}				private function scrollThumbs(index:Number)		{						currentSet += index;						var ypoint:Number = -(currentSet * maskClip.height)+ MENU_OUTERMARGIN_Y;			TweenLite.to(imgClip, 1 ,{y:(ypoint + maskClip.y), ease:Strong.easeOut});						trace("SCROLL mod:"+index+" currentSet:"+currentSet+" y:"+ypoint);					}						private function initArrows()		{			trace("INITARROWS");						prevButMC.buttonMode = true;			prevButMC.addEventListener(MouseEvent.MOUSE_OVER, prevArrowOver);			prevButMC.addEventListener(MouseEvent.MOUSE_OUT, prevArrowOut);			prevButMC.addEventListener(MouseEvent.CLICK, prevRequest);						nextButMC.buttonMode = true;			nextButMC.addEventListener(MouseEvent.MOUSE_OVER, nextArrowOver);			nextButMC.addEventListener(MouseEvent.MOUSE_OUT, nextArrowOut);			nextButMC.addEventListener(MouseEvent.CLICK, nextRequest);		}				private function prevArrowOver(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if(currentSet > 0){				mc.gotoAndStop(2);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}		private function prevArrowOut(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if(currentSet > 0){				mc.gotoAndStop(1);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}				private function nextArrowOver(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if((currentSet+1) <  Math.round((totalThumbs/COLUMN_COUNT) / visibleThumbs)){				mc.gotoAndStop(2);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}		private function nextArrowOut(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if((currentSet+1) <  Math.round((totalThumbs/COLUMN_COUNT) / visibleThumbs)){				mc.gotoAndStop(1);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}				private function prevRequest(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			mc.gotoAndStop(1);			mc.useHandCursor = false;			if(currentSet > 0) scrollThumbs(-1);		}				private function nextRequest(e:MouseEvent)		{						var mc:MovieClip = e.currentTarget as MovieClip;			mc.gotoAndStop(1);			mc.useHandCursor = false;			var totalSects:Number = Math.round((totalThumbs/COLUMN_COUNT) / visibleThumbs);			//trace("NEXT : totalsects:"+totalSects);			if((currentSet+1) < totalSects) scrollThumbs(1);		}																private function loadGraphic(asset:String, target:*)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function popTxt(txt:String, target:MovieClip)		{			var field:TextField = target.getChildByName("txt") as TextField;			field.htmlText = txt;		}				//////////////////////////////////////////Handlers												/////////////////////////////////////GETSETTERS						private function onRemoved(e:Event)		{					}			}}