package com.thride.media.videos{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.StageQuality;	import flash.display.Stage;	import flash.display.Loader;	import flash.display.StageDisplayState;		import flash.text.TextField;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.external.ExternalInterface;			import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.events.FullScreenEvent;		import flash.system.Capabilities;		import flash.events.ProgressEvent;	import flash.media.SoundTransform;		import flash.utils.Timer;	import flash.media.SoundMixer;		import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.geom.Rectangle;    import flash.xml.XMLDocument;    import flash.xml.XMLNode;    import flash.xml.XMLNodeType;		import fl.transitions.Tween;	import fl.transitions.easing.*;		import com.thride.Global;	import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });		public class VPlayer extends MovieClip	{				public var isPlaying:Boolean;				public var _vidSeekTime:Number;				// Video Seek Time		public var _vidCurrTime:Number;				// Video Current Time								public var _vidDuration:Number;				public var _soundTransform:SoundTransform;	// Sound Transformer						public var xmlLoc:String;		public var navTitle:String;		public var currentSubSection:String;		public var dataArr:Array = new Array();		public var dataXML:XML = new XML();						//public var CLIENTWIDTH:Number = Capabilities.screenResolutionX;		//public var CLIENTHEIGHT:Number = Capabilities.screenResolutionY;				public var VID_WIDTH:Number = 700;  //stage.stageWidth;		public var VID_HEIGHT:Number = 400; //stage.stageHeight;				public var maskClip:Sprite;				public var bottomBarMC:MovieClip;				public var playButMC:MovieClip;		public var loadBarMC:MovieClip;		public var scrubBarMC:MovieClip;		public var scrubFillMC:MovieClip;		public var audioButMC:MovieClip;		public var audioBarMC:MovieClip;		public var audioFillMC:MovieClip;		public var audioDragMC:MovieClip;		public var closeButMC:MovieClip;				public var timeText:TextField;		public var titleText:TextField;				public var vidPlayer:VideoPlayback;						public var isMuted:Boolean = false;				public var isEmbedded:Boolean;		public var isFullScreen:Boolean = false;		public var controlsOpened:Boolean;				public var currentChoice:Number = 0;				public var callBack:Function;				private var videoAsset:String;				public function VPlayer($src:String, $call:Function)		{						trace("VPLAYER INIT");			videoAsset = $src;			callBack = $call;			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);					}				public function onAddedToStage(event:Event)		{									//addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						//VID_WIDTH = stage.stageWidth;			//VID_HEIGHT = stage.stageHeight;			//timeText = getChildByName("timestring") as TextField;						bottomBarMC = getChildByName("bottom") as MovieClip;						playButMC = bottomBarMC.getChildByName("playBut") as MovieClip;						scrubBarMC = bottomBarMC.getChildByName("scrubBar") as MovieClip;			scrubFillMC = bottomBarMC.getChildByName("scrubFill") as MovieClip;			scrubFillMC.mouseEnabled = false;						audioButMC = bottomBarMC.getChildByName("audioBut") as MovieClip;			audioButMC.gotoAndStop(4);			audioBarMC = bottomBarMC.getChildByName("audioBar") as MovieClip;			audioFillMC = bottomBarMC.getChildByName("audioFill") as MovieClip;			audioDragMC = bottomBarMC.getChildByName("audioDrag") as MovieClip;			audioFillMC.mouseEnabled = false;			trace("VPLAYER ADDED TO STAGE");			setupVideo(); 					}								private function onRemovedFromStage(event:Event)		{						removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);			removeEventListener(Event.ENTER_FRAME, handleEnterFrame);		}										private function initVidControls()		{									trace("VPLAYER-----INITVIDCONTROLS()");					playButMC.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);			playButMC.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);			playButMC.buttonMode = true;									audioButMC.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);			audioButMC.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);			audioButMC.buttonMode = true;						scrubBarMC.addEventListener(MouseEvent.MOUSE_OVER, barOverHandler);			scrubBarMC.addEventListener(MouseEvent.MOUSE_OVER, barOutHandler);			scrubBarMC.buttonMode = true;									playButMC.addEventListener(MouseEvent.CLICK, playButClick);			scrubBarMC.addEventListener(MouseEvent.CLICK, scrubBarClick);						audioButMC.addEventListener(MouseEvent.CLICK, audioButClick);						audioDragMC.addEventListener(MouseEvent.MOUSE_DOWN, audioDragDown);			this.addEventListener(MouseEvent.MOUSE_UP, audioDragUp);			audioDragMC.buttonMode = true;						scrubFillMC.scaleX = 1;			scrubBarMC.scaleX = 1;						addEventListener(Event.ENTER_FRAME, handleEnterFrame);											}																								public function setupVideo()		{			trace("VPLAYER = SETUPVIDEO()");			if(vidPlayer){				vidPlayer.unloadVid();				vidPlayer.parent.removeChild(vidPlayer);			}						vidPlayer = new VideoPlayback( videoAsset, VID_WIDTH, VID_HEIGHT, Global.VIDEO_VOLUME, callBack );						vidPlayer.x = bottomBarMC.x;			vidPlayer.y = bottomBarMC.y - VID_HEIGHT;						initVidControls();						isPlaying = true;			addChild(vidPlayer);			setStartVolume();		}										/******************************************		**HANDLERS		*/				public function closeAction()		{			removeEventListener(Event.ENTER_FRAME, handleEnterFrame);			if(vidPlayer){			vidPlayer.unloadVid();			vidPlayer.parent.removeChild(vidPlayer);			vidPlayer = null;			}			this.parent.removeChild(this);		}				private function playButClick(e:MouseEvent)		{			if(isPlaying){				e.target.gotoAndStop(2);				isPlaying = false;								vidPlayer.pauseVid();			} else {				e.target.gotoAndStop(1);				isPlaying = true;				vidPlayer.resumeVid()			}		}				private function scrubBarClick(e:MouseEvent)		{			var timechoice:Number = (scrubBarMC.mouseX/scrubBarMC.width) * vidPlayer.vidDuration;			var percRequest:Number = timechoice/vidPlayer.vidDuration;			trace("SEEK REQUEST : timechoice:"+timechoice+" percRequested:"+percRequest+" percloaded:"+vidPlayer.vidLoaded);			if(percRequest <= vidPlayer.vidLoaded) vidPlayer.vidSeek(timechoice);			trace(timechoice);		}						private function audioButClick(e:MouseEvent)		{			if(!isMuted){				isMuted = true;				audioButMC.gotoAndStop(1);				//audioFillMC.scaleX = 0;				audioDragMC.x = audioFillMC.x + (audioFillMC.width*0);				vidPlayer.mute(true);											} else {				isMuted = false;								var playpoint:Number = Math.round((vidPlayer._volume)*4) + 1;				trace("VIDPLAYER.VOLUME:"+playpoint);				audioButMC.gotoAndStop(playpoint);				//audioFillMC.scaleX = vidPlayer._volume;				audioDragMC.x = audioFillMC.x + (audioFillMC.width*Global.VIDEO_VOLUME);								vidPlayer.mute(false);							}		}												private function audioBarClick(e:MouseEvent)		{						Global.VIDEO_VOLUME = Math.round((audioBarMC.mouseX/audioBarMC.width)*100)*.01;			//audioFillMC.scaleX = Global.VIDEO_VOLUME;				audioDragMC.x = audioFillMC.x + (audioFillMC.width*Global.VIDEO_VOLUME);			vidPlayer.setvolume(Global.VIDEO_VOLUME);					var playpoint:Number = Math.round((Global.VIDEO_VOLUME)*4) + 1;			trace("VIDPLAYER.VOLUME:"+Global.VIDEO_VOLUME);			audioButMC.gotoAndStop(playpoint);		}				private function audioDragDown(e:MouseEvent)		{			var sRect:Rectangle = new Rectangle(audioBarMC.x, audioDragMC.y, audioBarMC.width, 0);			audioDragMC.startDrag(false, sRect);			audioDragMC.addEventListener(MouseEvent.MOUSE_MOVE, dragLogic);		}				private function audioDragUp(e:MouseEvent)		{			audioDragMC.stopDrag();			audioDragMC.removeEventListener(MouseEvent.MOUSE_MOVE, dragLogic);		}				private function dragLogic(e:MouseEvent)		{			var diff:Number = audioDragMC.x - audioBarMC.x;//(audioDragMC.x+(audioDragMC.width/2)) - audioBarMC.x;			var val:Number = (diff/audioBarMC.width) < 1 ? (diff/audioBarMC.width) : 1;			trace(val);			Global.VIDEO_VOLUME = val;			vidPlayer.setvolume(val);		}				private function setStartVolume(){						audioFillMC.scaleX = Global.VIDEO_VOLUME;			audioDragMC.x = audioFillMC.x + (audioFillMC.width*Global.VIDEO_VOLUME);			vidPlayer.setvolume(Global.VIDEO_VOLUME);		}						public function mouseOverHandler(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			//mc.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 123, 61, 21, .5);			TweenLite.to(mc, 1, { tint:0xCCCCCC, ease:Strong.easeOut});		}				public function mouseOutHandler(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			//mc.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 1, 1, 1, 1);			TweenLite.to(mc, 1, { tint:0xFF0000, ease:Strong.easeOut});		}		public function barOverHandler(e:MouseEvent)		{			trace("BAR OVER");			var c:ColorTransform =  new ColorTransform(1, 1, 1, 1, 255, 0, 0, 1);			scrubFillMC.transform.colorTransform = c;					}				public function barOutHandler(e:MouseEvent)		{			var c:ColorTransform =  new ColorTransform(1, 1, 1, 1, 1, 1, 1, 1);			scrubFillMC.transform.colorTransform = c;		}						private function handleEnterFrame(e:Event) {			if(vidPlayer.vidDuration > 0){				var percPlayed:Number = (vidPlayer.vidTime/vidPlayer.vidDuration);				var percLoaded:Number = vidPlayer.vidLoaded;								 scrubFillMC.scaleX = percPlayed;			}					}						public function set _embedded(s:Boolean){			isEmbedded = s;		}				public function set _callBack(f:Function){			callBack = f;		}													}}