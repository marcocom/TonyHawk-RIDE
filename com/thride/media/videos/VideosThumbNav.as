package com.thride.media.videos{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.StageQuality;	import flash.display.Stage;	import flash.display.Loader;		import flash.display.LineScaleMode;    import flash.display.CapsStyle;    import flash.display.JointStyle;    import flash.display.Shape;	import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.net.URLLoader;	import flash.net.URLRequest;		import flash.events.Event;	import flash.events.MouseEvent;			import flash.system.Capabilities;		import flash.events.ProgressEvent;	import flash.media.SoundTransform;		import flash.geom.Rectangle;				import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });		public class VideosThumbNav extends MovieClip	{				public var isPlaying:Boolean;				private static const IMAGE_HEIGHT:Number = 160;				public var navSpacer:Number = 2;						public var imgLoader:Loader;		public var imgClip:Sprite;		public var maskClip:Sprite;				private var prevButMC:MovieClip;		private var nextButMC:MovieClip;				public var changeAction:Function;						public var dataXML:XMLList;		public var navArr:Array;				public var currentSet:Number = 0;		public var currentChoice:Number = 0;				public var visibleThumbs:Number = 3;				private var totalThumbs:Number;				private var imagecount:Number = -1;				var totalSects:Number;				public function VideosThumbNav()		{			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				public function onAddedToStage(event:Event)		{						prevButMC = getChildByName("arrow_up") as MovieClip;			nextButMC = getChildByName("arrow_dn") as MovieClip;					}		public function initThumbNav($dataXML:XMLList, $nextFunc:Function)		{												dataXML = $dataXML;			changeAction = $nextFunc;			totalThumbs = dataXML.elements().length();						trace("INIT THUMBNAV total:"+totalThumbs);						imgClip = new Sprite();			navArr = new Array();			addChild(imgClip);			maskClip = getChildByName("maskclip") as MovieClip;			addChild(maskClip);			imgClip.mask = maskClip;			initImages();						totalSects = Math.ceil(totalThumbs / visibleThumbs);			trace("NEXT : totalsects:"+totalSects);		}						public function highlightThumb(num:Number)		{			var scrollSet:Number = Math.floor(num / visibleThumbs);			trace("HIGHLIGHT THUMB    num:"+num+" scrollSet:"+scrollSet+" currentSet:"+currentSet);									if(scrollSet > currentSet){ 				scrollThumbs(scrollSet);			} else if(scrollSet < currentSet){				var goto:Number = currentSet - scrollSet;				scrollThumbs(-goto);			}			currentChoice = num;						//scrollThumbs(num);						for (var i:Number = 0; i < navArr.length; i++){				var mc:VideosThumb = navArr[i];				i != num ? mc.onState() : mc.offState();			}		}								private function initImages()		{						for (var i:int; i < totalThumbs; i++){								var asset:String = dataXML.video[i].@thumb;				var asset2:String = dataXML.video[i].@thumbshade;				var titlename:String = dataXML.video[i].title.valueOf();												var mc:VideosThumb = new VideosThumb(titlename, asset, asset2, i, changeAction);								imgClip.addChild(mc);				mc.y = i*(IMAGE_HEIGHT + navSpacer);								trace("NEW THUMB :"+i+": asset:"+asset+" mc:"+mc);								navArr.push(mc);			}			if((totalThumbs*(IMAGE_HEIGHT+navSpacer)) > maskClip.height) initArrows();					}				private function scrollThumbs(index:Number)		{						currentSet += index;						var ypoint:Number = -currentSet * (visibleThumbs * (navSpacer+ IMAGE_HEIGHT));			TweenLite.to(imgClip, 1 ,{y:ypoint, ease:Strong.easeOut});						trace("SCROLL mod:"+index+" currentSet:"+currentSet+" y:"+ypoint);					}				private function initArrows()		{			trace("INITARROWS");						prevButMC.buttonMode = true;			prevButMC.addEventListener(MouseEvent.MOUSE_OVER, prevArrowOver);			prevButMC.addEventListener(MouseEvent.MOUSE_OUT, prevArrowOut);			prevButMC.addEventListener(MouseEvent.CLICK, prevRequest);						nextButMC.buttonMode = true;			nextButMC.addEventListener(MouseEvent.MOUSE_OVER, nextArrowOver);			nextButMC.addEventListener(MouseEvent.MOUSE_OUT, nextArrowOut);			nextButMC.addEventListener(MouseEvent.CLICK, nextRequest);		}				private function prevArrowOver(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if(currentSet > 0){				mc.gotoAndStop(2);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}		private function prevArrowOut(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if(currentSet > 0){				mc.gotoAndStop(1);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}				private function nextArrowOver(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if((currentSet+1) < totalSects){				mc.gotoAndStop(2);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}		private function nextArrowOut(e:MouseEvent){			var mc:MovieClip = e.currentTarget as MovieClip;			if((currentSet+1) < totalSects){				mc.gotoAndStop(1);				mc.useHandCursor = true;			} else {				mc.useHandCursor = false;			}		}				private function prevRequest(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			mc.gotoAndStop(1);			mc.useHandCursor = false;			if(currentSet > 0) scrollThumbs(-1);		}				private function nextRequest(e:MouseEvent)		{			var mc:MovieClip = e.currentTarget as MovieClip;			mc.gotoAndStop(1);			mc.useHandCursor = false;						if((currentSet+1) < totalSects) scrollThumbs(1);		}				//////////////////////////////////////////Handlers										public function mouseOverHandler(e:MouseEvent)		{			var mc:MovieClip = e.target as MovieClip;			//mc.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 123, 61, 21, .5);						TweenLite.to(mc, 1, { tint:0xF67929, ease:Strong.easeOut});		}				public function mouseOutHandler(e:MouseEvent)		{			var mc:MovieClip = e.target as MovieClip;			//mc.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 1, 1, 1, 1);						TweenLite.to(mc, 1, { tint:0xFFFFFF, ease:Strong.easeOut});		}								/////////////////////////////////////GETSETTERS									}}