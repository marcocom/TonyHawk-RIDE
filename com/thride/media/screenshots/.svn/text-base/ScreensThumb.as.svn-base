package com.thride.media.screenshots{	import flash.display.Sprite;	import flash.display.Loader;		import flash.text.TextField;	import flash.net.URLLoader;	import flash.net.URLRequest;		import flash.geom.ColorTransform;		import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;			import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });			public class ScreensThumb extends Sprite	{		private static const TXT_Y:Number = 126;		private static const TXT_X:Number = 20;				private var title:String;		private var asset:String;		private var shadegraphic:String;				private var index:Number;				private var callBack:Function;		private var finishLoading:Function;		private var createRollOver:Function;				private var bg:Sprite;		private var img:Sprite;		private var shade:Sprite;				private var imgLoader:Loader;						private var isOn:Boolean = true;				private var txtClip:videoThumbTxt;						public function ScreensThumb($title:String, $asset:String, $asset2:String, $index:Number, $func:Function)		{			title = $title;			asset = $asset;			shadegraphic = $asset2;			index = $index;			callBack = $func;			//trace("THUMB INIT: title"+title+" asset:"+asset);			init();			if(index == 0) isOn = false;		}				private function init(){			initImage();		}				private function initImage()		{												imgLoader = new Loader();												imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imgLoaded);								imgLoader.load(new URLRequest(asset));												}		private function imgLoaded(e:Event)		{			img = new Sprite();			addChild(img);			img.addChild(e.currentTarget.content);			TweenLite.from(img, .5, {alpha:0});						imgLoader = new Loader();						imgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, shadeLoaded);						imgLoader.load(new URLRequest(shadegraphic));		}						private function shadeLoaded(e:Event)		{			shade = new Sprite();			addChild(shade);			shade.addChild(e.currentTarget.content);						//finishLoading();			isOn ? onState() : offState();			txtClip = new videoThumbTxt();			var t:TextField = txtClip.getChildByName("txt") as TextField;			t.htmlText = title;			addChild(txtClip);			txtClip.y = TXT_Y;			txtClip.x = TXT_X;		}						private function setListeners()		{							addEventListener(MouseEvent.MOUSE_OVER, onThumbOver);				addEventListener(MouseEvent.MOUSE_OUT, onThumbOut);				addEventListener(MouseEvent.CLICK, onThumbClick);				buttonMode = true;		}		private function closeListeners()		{				removeEventListener(MouseEvent.MOUSE_OVER, onThumbOver);				removeEventListener(MouseEvent.MOUSE_OUT, onThumbOut);				removeEventListener(MouseEvent.CLICK, onThumbClick);				buttonMode = false;		}						private function onThumbOver(e:MouseEvent)		{			trace("OVER : "+index);		}		private function onThumbOut(e:MouseEvent)		{					}		private function onThumbClick(e:MouseEvent)		{						callBack(index);			//this.parent.removeChild(this);		}				public function onState()		{			isOn = true;			setListeners();			trace("ONSTATE :"+index);			TweenLite.killTweensOf(shade);			TweenLite.to(shade, 1, {alpha:1});		}		public function offState()		{			trace("OFFSTATE :"+index);			closeListeners();			isOn = false;			TweenLite.killTweensOf(shade);			TweenLite.to(shade, 1, {alpha:0});		}				public function get _index():Number		{			return index;		}	}}