package com.thride.events{		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader;		import flash.events.MouseEvent;		import flash.events.Event;	import flash.events.KeyboardEvent;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;	import flash.net.navigateToURL;		import flash.geom.Rectangle;	import flash.geom.ColorTransform;		import fl.controls.ComboBox; 	import fl.data.DataProvider; 	import fl.events.ComponentEvent; 		import flash.ui.Keyboard;		import flash.utils.ByteArray;		import flash.net.LocalConnection;		import com.thride.Global;	import com.dynamicflash.util.Base64;	import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });			public class Send2Friend extends Sprite	{				private var closeBut:Sprite;		private var goBut:Sprite;				private var sendurl:String = "";				private var titleTxt:TextField;		//static		private var nameTxt:TextField;		private var friendTxt:TextField;		private var emailTxt:TextField;		//input		private var nameInput:TextField;		private var friendInput:TextField;		private var emailInput:TextField;		//error		private var errorTxt:TextField;				//bg		private var nameBG:Sprite;		private var friendBG:Sprite;		private var emailBG:Sprite;				private var invalidTint:ColorTransform = new ColorTransform(0.8, 0.8, 0.8, 1, 64, -64, -64, 0);		private var validTint:ColorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);				private var xmlList:XMLList;				private var deepLink:String;				private var cityState:String;				private var index:Number;				public function Send2Friend()		{			addEventListener(Event.ADDED_TO_STAGE, onAdded);		}				public function init($xml:XMLList, $asset:String, $index:Number, $city:String, $state:String)		{			xmlList = $xml;			index = $index;			deepLink = xmlList.linkback.valueOf() + $index;						cityState = $city + ", " + $state;						titleTxt.htmlText = xmlList.title.valueOf();						nameTxt.htmlText = xmlList.nametxt.valueOf();			friendTxt.htmlText = xmlList.friendtxt.valueOf();			emailTxt.htmlText = xmlList.emailtxt.valueOf();												loadGraphic($asset, goBut);			goBut.addEventListener(MouseEvent.CLICK, goAction);			goBut.buttonMode = true;						closeBut.addEventListener(MouseEvent.CLICK, closeAction);			closeBut.buttonMode = true;						nameInput.tabEnabled = true;			nameInput.tabIndex = 1;			friendInput.tabEnabled = true;			friendInput.tabIndex = 2;			emailInput.tabEnabled = true;			emailInput.tabIndex = 3;									stage.addEventListener(KeyboardEvent.KEY_DOWN, KeyDownFunc);		}				function KeyDownFunc(event){			if (event.keyCode == Keyboard.ENTER) {				goAction(null);			}		}						private function goAction(e:MouseEvent)		{			//var valid:Boolean = false;						if(validateName() && validateFriend() && validateEmail()){				initSend();			} else {				error.htmlText = xmlList.errortxt.valueOf();			}		}						private function validateName():Boolean		{			if(nameInput.text.length > 0){				nameBG.transform.colorTransform = validTint;				return true;			} else {				nameBG.transform.colorTransform = invalidTint;				return false;			}		}				private function validateFriend():Boolean		{			if(friendInput.text.length > 0){				friendBG.transform.colorTransform = validTint;				return true;			} else {				friendBG.transform.colorTransform = invalidTint;				return false;			}		}				private function validateEmail():Boolean		{			var txt:String = emailInput.text;			if(txt.length > 0 && txt.indexOf("@") > 1){				emailBG.transform.colorTransform = validTint;				return true;			} else {				emailBG.transform.colorTransform = invalidTint;				return false;			}		}				private function initSend(){						var preString:String = xmlList.email_body1.valueOf() + " " + friendInput.text+", "+ xmlList.email_body2.valueOf() + " " + cityState + ". " + deepLink + " -"+nameInput.text;			var sendString:String = escape(preString);						//trace("SEND: (without escape):"+preString);						var sendObj:URLVariables = new URLVariables();			sendObj.city = Base64.encode(cityState);			sendObj.country = Base64.encode(Global.COUNTRY);			sendObj.fromName = Base64.encode(nameInput.text);			sendObj.friendName = Base64.encode(friendInput.text);			sendObj.email = Base64.encode(emailInput.text);						var domainString:LocalConnection = new LocalConnection();			var deeplink:String = "http://"+domainString.domain+"/#/events/"+index;			sendObj.link = Base64.encode(deeplink);			trace("---DOMAIN TEST:"+deeplink);			for(var prop:String in sendObj){				trace("send2friend:"+prop);			}						var request:URLRequest = new URLRequest(Global.SEND2FRIEND);			request.method = URLRequestMethod.POST;			request.data = sendObj;			 			var loader:URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.VARIABLES;			 			try{				loader.load(request);			}			catch (error:Error) {				trace("Unable to load URL");			}									closeAction(null);		}										private function closeAction(e:MouseEvent)		{			visible = false;		}						private function onAdded(e:Event)		{			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);			closeBut = getChildByName("closebut") as Sprite;			goBut = getChildByName("godyn") as Sprite;						//static			titleTxt = getChildByName("titletxt") as TextField;			nameTxt= getChildByName("nametxt") as TextField;			friendTxt=getChildByName("friendtxt") as TextField;			emailTxt=getChildByName("emailtxt") as TextField;			errorTxt=getChildByName("error") as TextField;			//input			nameInput=getChildByName("name_input") as TextField;			friendInput=getChildByName("friend_input") as TextField;			emailInput=getChildByName("email_input") as TextField;			//bg			nameBG=getChildByName("namebg") as Sprite;			friendBG=getChildByName("friendbg") as Sprite;			emailBG=getChildByName("emailbg") as Sprite;		}				private function loadGraphic(asset:String, target:Sprite)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function onRemoved(e:Event)		{									stage.removeEventListener(KeyboardEvent.KEY_DOWN, KeyDownFunc);		}			}}