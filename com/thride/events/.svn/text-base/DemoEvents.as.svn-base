package com.thride.events{	import flash.display.Stage;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.utils.Timer;		import flash.geom.Rectangle;	import flash.geom.ColorTransform;		import flash.ui.Keyboard;		import com.asual.swfaddress.*;	import com.thride.Global;	import com.thride.NavEvent;	import gs.TweenLite;	import gs.easing.*;		public class DemoEvents extends MovieClip	{		private static const MAPWIDTH:Number = 735;		private static const MAPHEIGHT:Number = 489;				private var xmlList:XMLList;		private var dataXML:XML = new XML();		private var xmlloader:Loader;				private var navArr:Array;		private var elementArr:Array;				private var xmlAsset:String;				private var bgClip:MovieClip;				private var googleMap:GoogleMap;		private var listClip:Sprite;				private var titleClip:MovieClip;		private var subTitleClip:MovieClip;		private var ctaClip:MovieClip;		private var inputBG:MovieClip;		private var goBut:MovieClip;		private var infoClip:InfoClip;		private var backBut:MovieClip;				private var locMenu:LocationsMenu;		private var upArrow:MovieClip;		private var dnArrow:MovieClip;				private var youtubeBut:MovieClip;				private var totalElements:Number;				private var invalidTint:ColorTransform = new ColorTransform(0.8, 0.8, 0.8, 1, 64, -64, -64, 0);				private var inputField:TextField;				private var isRefined:Boolean;				public function DemoEvents()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);				}		////////CONSTRUCT				private function onAdded(e:Event)		{			visible = false;			titleClip = getChildByName("titledyn") as MovieClip;			subTitleClip = getChildByName("subtitle_txt")as MovieClip;			inputBG = getChildByName("inputbg") as MovieClip;			inputField = getChildByName("zip") as TextField;						inputField.restrict = "0-9";						goBut = getChildByName("godyn") as MovieClip;			infoClip = getChildByName("infoclip") as InfoClip;			ctaClip = getChildByName("enterzip_txt") as MovieClip;			locMenu = getChildByName("locclip") as LocationsMenu;			youtubeBut = getChildByName("youtubedyn") as MovieClip;			backBut = getChildByName("backdyn") as MovieClip;						infoClip.visible = false;			locMenu.visible = false;						addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);		}				private function onRemoved(e:Event)		{			stage.removeEventListener(KeyboardEvent.KEY_DOWN, KeyDownFunc);		}				public function init($xmlsrc:String)		{			xmlAsset = $xmlsrc;			loadData();			stage.addEventListener(KeyboardEvent.KEY_DOWN, KeyDownFunc);		}						private function processZip(e:MouseEvent)		{						trace("PROCESS ZIP:" + inputField.text);			if(inputField.text.length < 1){				isRefined = false;				googleMap.goNational();				locMenu.sortLoc(" ");				backBut.visible = false;			} else 			if(validateZip()){				isRefined = true;				googleMap.mapRef(inputField.text);				locMenu.sortLoc(inputField.text);				backBut.visible = true;			}						}				function KeyDownFunc(event){			if (event.keyCode == Keyboard.ENTER) {				processZip(null);			}		}						private function validateZip():Boolean		{			if(inputField.text.length == 5){				inputBG.transform.colorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);				error.htmlText = "";				return true;			} else {				inputBG.transform.colorTransform = invalidTint;				error.htmlText = dataXML.zip_error.valueOf();				return false;			}		}				private function initGoBut()		{			loadGraphic(dataXML.gobut.@asset, goBut);			goBut.addEventListener(MouseEvent.CLICK, processZip);			goBut.buttonMode = true;					}				private function initListMode()		{			subTitleClip.visible = true;			inputBG.visible = true;			inputField.visible = true;			goBut.visible = true;			infoClip.visible = false;			ctaClip.visible = true;						loadGraphic(dataXML.title.@asset, titleClip);						popTxt(dataXML.subtitle.valueOf(), subTitleClip);						TweenLite.to(inputBG, .4, {alpha:1});						popTxt(dataXML.cta.valueOf(), ctaClip);						locMenu.init(dataXML.events, menuAction);			locMenu.visible = true;						//checkDeepLink();		}				private function initYouTube(){			loadGraphic(dataXML.youtube.@asset, youtubeBut);			youtubeBut.addEventListener(MouseEvent.CLICK, youtubeAction);			youtubeBut.buttonMode = true;		}				private function initBackBut(){			var backimg:String = "img/"+Global.COUNTRY+"/events/backbut.png";			loadGraphic(backimg, backBut);			backBut.addEventListener(MouseEvent.CLICK, backAction);			backBut.buttonMode = true;			backBut.visible = false;		}				private function youtubeAction(e:MouseEvent){			dispatchEvent(new NavEvent(NavEvent.LINKOUT, true, true, dataXML.youtube.@url));		}				private function backAction(e:MouseEvent){			inputField.text = "";			processZip(null);		}						///////////////////////////////////////LOCATIONS		private function initLocations()		{						if(googleMap.mapIsZoomed){ 				//googleMap.goNational();				inputField.text = "";				processZip(null);				backBut.visible = false;			}			locMenu.visible = true;			subTitleClip.visible = true;			inputBG.visible = true;			inputField.visible = true;			goBut.visible = true;			ctaClip.visible = true;						infoClip.visible = false;		}				private function initInfo()		{			locMenu.visible = false;			subTitleClip.visible = false;			inputBG.visible = false;			inputField.visible = false;			goBut.visible = false;			ctaClip.visible = false;			backBut.visible = false;						//infoClip.			infoClip.visible = true;			addChild(infoClip);		}				private function addressChange(e:SWFAddressEvent)		{			var arr:Array = SWFAddress.getPathNames();			trace("\n\nDEMO EVENTS --- ADDRESS CHANGE name:"+e.value+" ARR: length:"+arr.length+" vals:"+arr);			if(arr.length == 2){								var flip:Number = Math.abs(arr[1] - totalElements);				selectAction(flip);			}		}						private function checkDeepLink()		{			SWFAddress.addEventListener(SWFAddressEvent.CHANGE, addressChange);			var arr:Array = SWFAddress.getPathNames();			trace("DEEPLINK : length:"+arr.length+" vals:"+arr);						if(arr.length < 2){				googleMap.goNational();			} else {				var flip:Number = Math.abs(arr[1] - totalElements);				selectAction(flip);			}		}				public function menuAction($data:Object)		{			trace("MENUACTION() lat:"+$data.lat+" long:"+$data.long+" zoom:"+$data.zoom);			googleMap.goTo($data.lat, $data.long, $data.zoom);			infoClip.init($data, initLocations, dataXML.share_linkout.valueOf(), dataXML.send2friend, dataXML.gobut.@asset, totalElements);			initInfo();		}								public function selectAction(num:Number)		{									var a:Object = new Object();			a.title = dataXML.events.location[num].@title;			a.address = dataXML.events.location[num].@address;			a.city = dataXML.events.location[num].@city;			a.state = dataXML.events.location[num].@state;			a.zip = dataXML.events.location[num].@zip;			a.date = dataXML.events.location[num].@date;			a.lat = dataXML.events.location[num].@lat;			a.long = dataXML.events.location[num].@long;			a.zoom = dataXML.events.location[num].@zoom;			a.facebook = "";//dataXML.events.location[num].@facebook;			a.twitter = "";//dataXML.events.location[num].@twitter;						a.phone = dataXML.events.location[num].@phone;			a.url = dataXML.events.location[num].@url;						a.index = num;						menuAction(a);			//var mc:Location = locMenu.navArr[num] as Location;			//mc.onState();			//locMenu.currentLocation = locMenu.navArr[num];		}				public function markerAction(num:Number)		{			var flip:Number = Math.abs(num - totalElements);			SWFAddress.setValue("events/"+flip);		}						//////////////////////////////////////INPUT		private function initInput()		{			function keyDown(e:KeyboardEvent){				trace("KEYDOWN TEST:"+e.keyCode);			}			function setEnter(e:Event){				trace("INPUT SELECTED");				inputField.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);			}			inputField.addEventListener(Event.SELECT, setEnter);		}						/////////////////////////////////////BG and opening anim				private function initBG()		{						bgClip = getChildByName("bgclip") as MovieClip;			//trace("INITBG :w:"+bgClip.width);			TweenLite.from(bgClip, .5, {x:Global.SWFWIDTH, ease:Bounce.easeOut, onComplete:initMap});			visible = true;		}								////////////////////////////////////				private function initMap()		{			initGoBut();			initBackBut();			//initYouTube();   //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<DSIABLED BY LAST MINUTE REQUEST						googleMap = new GoogleMap(Global.GOOGLEKEY, MAPWIDTH, MAPHEIGHT, checkDeepLink);			googleMap.dataXML = dataXML.events;			addChild(googleMap);									googleMap.x = 255;			googleMap.y = 50;						googleMap.choiceFunc = markerAction;			createFrame();			initListMode();		}				private function createFrame(){			var frame:Sprite = new Sprite();			frame.graphics.lineStyle(3, 0x666666, 1, true);			frame.graphics.drawRect(-3, -3, (MAPWIDTH+3), (MAPHEIGHT+3));			frame.graphics.endFill();			addChild(frame);			frame.x = googleMap.x;			frame.y = googleMap.y;		}				private function loadGraphic(asset:String, target:MovieClip)		{						var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function popTxt(txt:String, target:MovieClip)		{			var field:TextField = target.getChildByName("txt") as TextField;			field.htmlText = txt;		}						/////////////////////////////////////HANDLERS														 				/******************************************		XML		*******************************************/				private function loadData()		{			var dataURL:URLRequest = new URLRequest(xmlAsset);			var xmlLoader:URLLoader = new URLLoader(dataURL);			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			dataXML.ignoreWhitespace = true;			dataXML.ignoreProcessingInstructions;		} 				private function xmlLoaded(event:Event) 		{									dataXML = new XML(event.currentTarget.data);						var totalSections:Number = dataXML.elements().length();			trace("LOADDATA :: total K:"+event.currentTarget.bytesTotal);			trace("TOTAL FIRST NODES==================================================:"+totalSections); 						totalElements = dataXML.events.elements().length();						initBG();		}			}}