package com.thride.events{	import flash.display.Stage;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;		import flash.events.Event;	import flash.events.MouseEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.utils.Timer;		import flash.geom.Rectangle;			import com.asual.swfaddress.*;	import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });			public class LocationsMenu extends MovieClip	{		private var sortStrength:Number = 1; // this is how many digits of the zip code we use to refine the list				private var xmlList:XMLList;				private var totalNavs:Number;		private var navMargin:Number = 5;				private var totalVisibleMenus:Number = 12;		private var currentSet:Number = 0;		private var menuItemHeight:Number;				private var nextArrow:MovieClip;		private var prevArrow:MovieClip;		private var maskClip:MovieClip;				private var menuClip:Sprite;		private var refinedClip:Sprite;				public var navArr:Array = new Array();		private var refinedArr:Array = new Array();				private var callBack:Function;				private var isRefined:Boolean;				public var currentLocation:Location;				private var totalElements:Number;		public function LocationsMenu()		{			addEventListener(Event.ADDED_TO_STAGE, onAdded);		}				public function init($list:XMLList, $call:Function)		{			xmlList = $list;			callBack = $call;			menuClip = new Sprite();			this.addChild(menuClip);			refinedClip = new Sprite();			initMenu();		}				private function initMenu($zip:String = null)		{			trace("INITMENU zip:"+$zip);			if($zip){				for(var j:int; j < navArr.length; j++){					var jloc:Location = navArr[j] as Location;					jloc.parent.removeChild(jloc);					jloc = null;									}				navArr = [];			}						totalNavs = xmlList.elements().length();			//trace("INITMENU() :: totalnavs:"+totalNavs);			for (var i:int; i < totalNavs; i++){								var mc:Location;				if($zip){					if(xmlList.location[i].@zip.substring(0, sortStrength) == $zip.substring(0, sortStrength)){						mc = new Location(xmlList.location[i], i);						mc.y = menuClip.height + navMargin;						menuClip.addChild(mc);						menuItemHeight = mc.height;												mc.addEventListener(MouseEvent.CLICK, navClick);						mc.addEventListener(MouseEvent.ROLL_OVER, navOver);						mc.addEventListener(MouseEvent.ROLL_OUT, navOut);						mc.buttonMode = true;												navArr.push(mc);					}				} else {						mc = new Location(xmlList.location[i], i);						mc.y = menuClip.height + navMargin;						menuClip.addChild(mc);						menuItemHeight = mc.height;												mc.addEventListener(MouseEvent.CLICK, navClick);						mc.addEventListener(MouseEvent.ROLL_OVER, navOver);						mc.addEventListener(MouseEvent.ROLL_OUT, navOut);						mc.buttonMode = true;												navArr.push(mc);				}			}						if(menuClip.height > maskClip.height){				maskClip.visible = true;				nextArrow.visible = true;				prevArrow.visible = true;				menuClip.mask = maskClip;				initArrows();			} else {				maskClip.visible = false;				nextArrow.visible = false;				prevArrow.visible = false;							}		}						private function initArrows()		{			nextArrow.addEventListener(MouseEvent.CLICK, nextRequest);			nextArrow.buttonMode = true;			prevArrow.addEventListener(MouseEvent.CLICK, prevRequest);			prevArrow.buttonMode = true;		}				private function prevRequest(e:MouseEvent)		{			if(currentSet > 0) scrollMenu(-1);		}				private function nextRequest(e:MouseEvent)		{			var totalSects:Number = Math.ceil(totalNavs / totalVisibleMenus);			if((currentSet+1) < totalSects) scrollMenu(1);		}				private function scrollMenu(mod:Number)		{			currentSet += mod;						var ypoint:Number = -currentSet * (totalVisibleMenus * (navMargin+ menuItemHeight));			TweenLite.to(menuClip, 1 ,{y:ypoint, ease:Strong.easeOut});						trace("SCROLL mod:"+mod+" currentSet:"+currentSet+" y:"+ypoint);		}				public function sortLoc($zip:String){			var count:int;			var compare:String = $zip.substring(0, sortStrength);			for(var i:int; i < navArr.length; i++){				var loc:Location = navArr[i] as Location;				var locZip:String = loc._data.zip.substring(0, sortStrength);				trace("testing:"+loc._data.zip+" sub:"+locZip);				if(compare == locZip) count++;			}						trace("LOCATION MENU ZIP-SORT :"+$zip+" total found:"+count);			if(count > 0){ 				isRefined = true;				initMenu($zip);							} else {				if(isRefined){ 				isRefined = false;				initMenu();				}			}		}										private function navOver(e:MouseEvent)		{			var mc:Location = e.currentTarget as Location;			mc.onState();					}		private function navOut(e:MouseEvent)		{			var mc:Location = e.currentTarget as Location;			mc.offState();					}				private function navClick(e:MouseEvent)		{			var mc:Location = e.currentTarget as Location;			//trace("WTF :: this:"+mc.name+" currentLoc:"+currentLocation.name);						//if(currentLocation) currentLocation.offState();			//currentLocation = mc;			mc.onState();						//callBack(mc._data);			var num:Number = mc.index;			var flip:Number= Math.abs(num-totalNavs);			trace("DEMOEVENTS CHANGEACTION:"+num);			SWFAddress.setValue(("events/"+flip))		}				private function onAdded(e:Event)		{			nextArrow = getChildByName("arrow_down") as MovieClip;			prevArrow = getChildByName("arrow_up") as MovieClip;			maskClip = getChildByName("maskclip") as MovieClip;					}			}}