package com.thride.events{		import flash.display.Sprite;	import flash.display.DisplayObject;    import flash.events.Event;    import flash.geom.Point;		import com.google.maps.*;	import com.google.maps.LatLng;	import com.google.maps.MapEvent;	import com.google.maps.MapType;	import com.google.maps.overlays.Marker;	import com.google.maps.overlays.MarkerOptions;	import com.google.maps.MapType;	import com.google.maps.LatLng;	import com.google.maps.styles.FillStyle;	import com.google.maps.styles.StrokeStyle;	import com.google.maps.controls.*	import com.google.maps.overlays.* 	import com.google.maps.services.Placemark;	import com.google.maps.services.GeocodingEvent;	import com.google.maps.services.GeocodingResponse;	import com.google.maps.services.ClientGeocoder;				public class GoogleMap extends Sprite {        private var map:Map = new Map();				private var geocoder:ClientGeocoder;		private var dataList:XMLList;		private var changeAction:Function;				private var markerArr:Array = new Array();				public var mapIsReady:Boolean = false;		public var mapIsZoomed:Boolean = false;		private var callBack:Function;		        public function GoogleMap($mapkey:String, $w:Number, $h:Number, $call:Function) {			            map.key = $mapkey;            map.setSize(new Point($w, $h));			callBack = $call;			            map.addEventListener(MapEvent.MAP_READY, onMapReady);			map.addEventListener(MapEvent.MAP_PREINITIALIZE, onMapInit);            			this.addChild(map);			trace("GOOGLEMAP : CONSTRUCT");			addEventListener(Event.ADDED_TO_STAGE, onAdded);		}				private function onMapInit(event:Event)		{			trace("GOOGLE MAP INITIALIZZED");		}				private function onMapReady(event:Event)		{			trace("GOOGLE MAP READY");			mapIsReady = true;			initMarkers();			callBack();					}				public function goNational(){			map.setCenter(new LatLng(34.00,-95.00), 4, MapType.NORMAL_MAP_TYPE);			//http://maps.google.com/maps?f=q&source=s_q&hl=en&geocode=&q=United+States&sll=34.086941,-118.270204&sspn=0.111175,0.151062&ie=UTF8&ll=37.09024,-82.177734&spn=53.829089,77.34375&t=h&z=4			map.addControl(new ZoomControl());			map.addControl(new PositionControl());			map.addControl(new MapTypeControl());								}				public function mapRef($address:String) {				geocoder = new ClientGeocoder();					geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS, geocodingSuccessHandler);					geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE, geocodingFailureHandler);					geocoder.geocode($address);		}				private function geocodingSuccessHandler(event:GeocodingEvent):void		{			var marker:Marker = new Marker(GeocodingResponse(event.response).placemarks[0].point);			//marker.addEventListener(MapMouseEvent.CLICK, markerClickHandler);			//map.addOverlay(marker);			map.setCenter(GeocodingResponse(event.response).placemarks[0].point, 8);		}		private function geocodingFailureHandler(event:GeocodingEvent):void		{			trace("can not locate: " + event.name);		}		private function initMarkers()		{			trace("INITMARKERS :" + dataList.elements().length());						for (var i:int; i < dataList.elements().length(); i++) {				//trace("MARK: "+				var mapx:Number = Number(dataList.location[i].@lat);				var mapy:Number = Number(dataList.location[i].@long);				var latlng:LatLng = new LatLng(mapx, mapy);				var insetTxt:String = dataList.location[i].@address +"\n" + dataList.location[i].@city +", " + dataList.location[i].@state + " " + dataList.location[i].@zip;				var m:Marker = createMarker(latlng, i, dataList.location[i].content_tip.valueOf(), dataList.location[i].title.valueOf(), insetTxt, i);				map.addOverlay(m); 							}		}				public function goTo($lat:String, $long:String, $zoom:Number)		{			mapIsZoomed = true;			var lat:Number = Number($lat);			var long:Number = Number($long);			map.setCenter(new LatLng(lat,long), $zoom, MapType.NORMAL_MAP_TYPE);			if(!mapIsReady){				map.addControl(new ZoomControl());				map.addControl(new PositionControl());				map.addControl(new MapTypeControl());								//initMarkers();				mapIsReady = true;			}		}				private function onAdded(e:Event) {							}		//////////////////////////////////////MARKERS				public function set dataXML($data:XMLList) {					dataList = $data;		}		public function set choiceFunc($func:Function) {			changeAction = $func;		}				function createMarker(latlng:LatLng, number:Number, tip:String, myTitle:String, myContent:String, index:Number):Marker 		{			var img:DisplayObject = new map_marker() as DisplayObject;			//trace("MARKER :"+number+" "+myContent);			var mark:Marker = new Marker(latlng, new MarkerOptions({ 									  					icon:img,														iconAlignment:MarkerOptions.ALIGN_HORIZONTAL_CENTER,														iconOffset:0,														hasShadow: true,  														tooltip: ""+tip    														}) );  			function markAction(event:MapMouseEvent){ 				//trace("MARK CLICK:"+index);				//dispatchEvent(new markerEvent(markerEvent.LINK, true, true, index));				changeAction(index);				//map.openInfoWindow(event.latLng, new InfoWindowOptions({ titleHTML: ""+myTitle, contentHTML: ""+myContent }));  													}			mark.addEventListener(MapMouseEvent.CLICK, markAction);  						return mark;		}            }}