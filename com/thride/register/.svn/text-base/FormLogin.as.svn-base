package com.thride.register {	import com.barliesque.DataCom;	import com.barliesque.morf.utils.getLabeledFrames;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.text.TextField;	import flash.text.TextFormat;		/**	 * ...	 * @author David Barlia	 */	public class FormLogin extends MovieClip {				//-------------------------------				// on-stage... Labels		public var loginHeader:TextField;		public var loginInstructions:TextField;		public var loginLabelEmail:TextField;		public var loginLabelPassword:TextField;		public var loginButton:TextField;		public var loginSubmitLabel:TextField;		public var loginError:TextField;				// on-stage... Fields		public var loginFieldEmail:FormField;		public var loginFieldPassword:FormField;		public var loginSubmit:SimpleButton;		public var loginForgot:TextField;				// on-stage... Frame: Update		public var updateHeader:TextField;		public var updateInstructions:TextField;		public var updateSubscription:TextField;		public var updateSubscribeYes:Toggler;		public var updateSubscribeNo:Toggler;		public var updateLabelYes:TextField;		public var updateLabelNo:TextField;		public var updateSubmitLabel:TextField;		public var updateSubmit:SimpleButton;		public var updateError:TextField;				//-------------------------------				private var frames:Object;		private var dataXML:XML;		private var soap:DataCom = new DataCom("php/datacom.php");		private var uid:String;				//-------------------------------				public function FormLogin() {			stop();						frames = getLabeledFrames(this);			addFrameScript(frames.update - 1, initUpdate);						loginSubmitLabel.mouseEnabled = false;			loginSubmit.addEventListener(MouseEvent.CLICK, doLogin, false, 0, true);						updateSubscribeYes.visible = false;			updateSubscribeNo.visible = false;			updateSubmit.visible = false;		}				private function doLogin(e:MouseEvent):void {			changeText(loginError, "");			if (validate()) {				var data:Object = {					email:		loginFieldEmail.value,					password:	loginFieldPassword.value				};				soap.getData("login", loginDone, data);			}		}				private function loginDone(data:Object):void {			if (data.error == undefined) {				// Login succesful				uid = data.uid;				gotoAndStop(frames.update);				loginFieldEmail.valid = true;			} else {				// Login unsuccesful				try {					loginFieldEmail.valid = false;					var err:String = data.error.faultstring;					err = err.substr(err.lastIndexOf("."));					changeText(loginError, dataXML.strings.error[err]);				} finally {					changeText(loginError, dataXML.strings.error.emailBad);				}			}		}				public function applyLabels(dataXML:XML):void {			this.dataXML = dataXML;						changeText(loginHeader, dataXML.strings.loginHeader);			changeText(loginInstructions, dataXML.strings.loginInstructions);			changeText(loginLabelEmail, dataXML.strings.loginLabelEmail);			changeText(loginLabelPassword, dataXML.strings.loginLabelPassword);			changeText(loginSubmitLabel, dataXML.strings.loginButton);			changeText(loginError, "");						changeText(loginForgot, '<u><a href="event:Forgot">' + dataXML.strings.loginForgot + "</a></u>");			loginForgot.addEventListener(TextEvent.LINK, forgotPassword, false, 0, true);						loginFieldPassword.password = true;			loginFieldPassword.restrict = dataXML.strings.passwordChars;		}				function forgotPassword(event:TextEvent):void {			// Show "forgot" dialog			parent["forgotDialog"].visible = true;		}				private function changeText(field:TextField, text:String):void {			if (text.search("</") || text.search("/>")) {				field.htmlText = text;			} else {				var format:TextFormat = field.getTextFormat();				field.text = text;				field.setTextFormat(format);			}		}				private function initUpdate(...ignore):void {			// Apply Labels...			changeText(updateHeader, dataXML.strings.updateHeader);			changeText(updateInstructions, dataXML.strings.updateInstructions);			changeText(updateSubscription, dataXML.strings.updateSubscription);			changeText(updateLabelYes, dataXML.strings.regLabelYes);			changeText(updateLabelNo, dataXML.strings.regLabelNo);			changeText(updateSubmitLabel, dataXML.strings.updateButton);			changeText(updateError, "");						updateSubmitLabel.mouseEnabled = false;						updateSubscribeYes.visible = true;			updateSubscribeNo.visible = true;			updateSubmit.visible = true;			updateSubscribeYes.addEventListener(Toggler.SELECT, changeSubscribe, false, 0, true);			updateSubscribeNo.addEventListener(Toggler.SELECT, changeSubscribe, false, 0, true);			updateSubmit.addEventListener(MouseEvent.CLICK, doUpdate, false, 0, true);			updateSubscribeYes.toggleClick = false;			updateSubscribeNo.toggleClick = false;		}				private function doUpdate(e:MouseEvent):void {			soap.sendData("update", { 				uid: uid, 				email: loginFieldEmail.value, 				password: loginFieldPassword.value, 				subscribe: (updateSubscribeYes.selected ? "1" : "0") } );			updateDone();		}				private function updateDone():void {			// Update successful			changeText(updateError, dataXML.strings.updateSuccess);		}				private function changeSubscribe(e:Event):void {			// Yes *OR* No			if (e.target == updateSubscribeNo) {				updateSubscribeYes.selected = !updateSubscribeNo.selected;			} else {				updateSubscribeNo.selected = !updateSubscribeYes.selected;			}		}				/********************************************		 *  VALIDATION		 ********************************************/				private function validate(...ignore):Boolean {			var ok:Boolean;			var parts:Array = loginFieldEmail.value.split("@");			if (parts.length == 2) {				trace(String(parts[1]).search("\\."));				ok = (String(parts[1]).search("\\.") > 0);			} else {				ok = false;			}						return ok;		}			}}