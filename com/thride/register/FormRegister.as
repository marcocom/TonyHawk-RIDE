package com.thride.register {	import com.barliesque.DataCom;	import fl.controls.ComboBox;	import fl.data.DataProvider;	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;		/**	 * ...	 * @author David Barlia	 */	public class FormRegister extends MovieClip {				//-------------------------------				// on-stage... LABELS		public var regHeader:TextField;		public var regInstructions:TextField;		public var regRequired:TextField;		public var regLabelFirstName:TextField;		public var regLabelLastName:TextField;		public var regLabelEmail:TextField;		public var regLabelEmail2:TextField;		public var regLabelPassword:TextField;		public var regLabelPassword2:TextField;		public var regLabelUsername:TextField;		public var regLabelGender:TextField;		public var regLabelMale:TextField;		public var regLabelFemale:TextField;		public var regLabelDOB:TextField;		public var regLabelCountry:TextField;		public var regLabelLanguage:TextField;		public var regSubscribe:TextField;		public var regLabelYes:TextField;		public var regLabelNo:TextField;		public var regSubmitLabel:TextField;		public var regError:TextField;					// on-stage... FIELDS		public var regFieldFirstName:FormField;		public var regFieldLastName:FormField;		public var regFieldEmail:FormField;		public var regFieldEmail2:FormField;		public var regFieldPassword:FormField;		public var regFieldPassword2:FormField;		public var regFieldUsername:FormField;		public var regRadioMale:Toggler;		public var regRadioFemale:Toggler;		public var regDOBmonth:ComboBox;		public var regDOBday:ComboBox;		public var regDOByear:ComboBox;		public var regSubscribeYes:Toggler;		public var regSubscribeNo:Toggler;		public var regLanguage:ComboBox;		public var regCountry:ComboBox;		public var regSubmit:SimpleButton;				//-------------------------------				private var dataXML:XML;		private var soap:DataCom = new DataCom("php/datacom.php");		private var soap2:DataCom = new DataCom("php/datacom.php");				private var months:DataProvider;		private var days:DataProvider;		private var years:DataProvider;		private var languages:DataProvider;		private var countries:DataProvider;				//-------------------------------				public function FormRegister() {			regRadioMale.addEventListener(Toggler.SELECT, changeGender, false, 0, true);			regRadioFemale.addEventListener(Toggler.SELECT, changeGender, false, 0, true);			regRadioMale.toggleClick = false;			regRadioFemale.toggleClick = false;						regSubscribeYes.addEventListener(Toggler.SELECT, changeSubscribe, false, 0, true);			regSubscribeNo.addEventListener(Toggler.SELECT, changeSubscribe, false, 0, true);			regSubscribeYes.toggleClick = false;			regSubscribeNo.toggleClick = false;						regSubmitLabel.mouseEnabled = false;			regSubmit.addEventListener(MouseEvent.CLICK, register, false, 0, true);						regFieldEmail.addEventListener(FocusEvent.FOCUS_OUT, regValidEmail, false, 0, true);			regFieldEmail2.addEventListener(FocusEvent.FOCUS_OUT, regConfirmEmail, false, 0, true);			regFieldPassword.addEventListener(FocusEvent.FOCUS_OUT, regValidPassword, false, 0, true);			regFieldPassword2.addEventListener(FocusEvent.FOCUS_OUT, regConfirmPassword, false, 0, true);						showError("");		}				public function applyLabels(dataXML:XML):void {			this.dataXML = dataXML;						changeText(regHeader, dataXML.strings.regHeader);			changeText(regInstructions, dataXML.strings.regInstructions);			changeText(regRequired, dataXML.strings.regRequired);			changeText(regLabelFirstName, dataXML.strings.regLabelFirstName);			changeText(regLabelLastName, dataXML.strings.regLabelLastName);			changeText(regLabelEmail, dataXML.strings.regLabelEmail);			changeText(regLabelEmail2, dataXML.strings.regLabelEmail2);			changeText(regLabelPassword, dataXML.strings.regLabelPassword);			changeText(regLabelPassword2, dataXML.strings.regLabelPassword2);			changeText(regLabelUsername, dataXML.strings.regLabelUsername);			changeText(regLabelGender, dataXML.strings.regLabelGender);			changeText(regLabelMale, dataXML.strings.regLabelMale);			changeText(regLabelFemale, dataXML.strings.regLabelFemale);			changeText(regLabelDOB, dataXML.strings.regLabelDOB);			changeText(regLabelCountry, dataXML.strings.regLabelCountry);			changeText(regSubscribe, dataXML.strings.regSubscribe);			changeText(regLabelYes, dataXML.strings.regLabelYes);			changeText(regLabelNo, dataXML.strings.regLabelNo);			changeText(regSubmitLabel, dataXML.strings.regButton);						months = new DataProvider(dataXML.strings.calendar[0]);			regDOBmonth.dataProvider = months;			regDOBmonth.prompt = dataXML.strings.regLabelMonth;			regDOBmonth.textField.setStyle("textFormat", regLabelYes.getTextFormat());			regDOBmonth.dropdown.setSharedStyle("textFormat", regLabelYes.getTextFormat());						days = new DataProvider();			for (var i:int = 1; i <= 31; i++) {				days.addItem( { label: i} );			}			regDOBday.dataProvider = days;			regDOBday.prompt = dataXML.strings.regLabelDay;			regDOBday.textField.setStyle("textFormat", regLabelYes.getTextFormat());			regDOBday.dropdown.setSharedStyle("textFormat", regLabelYes.getTextFormat());						years = new DataProvider();			var thisYear:int = int(new Date().fullYear);			for (i = thisYear; i >= thisYear - 90; i--) {				years.addItem( { label: i } );			}			regDOByear.dataProvider = years;			regDOByear.prompt = dataXML.strings.regLabelYear;			regDOByear.textField.setStyle("textFormat", regLabelYes.getTextFormat());			regDOByear.dropdown.setSharedStyle("textFormat", regLabelYes.getTextFormat());						regFieldPassword.password = true;			regFieldPassword2.password = true;			regFieldPassword.restrict = dataXML.strings.passwordChars;			regFieldPassword2.restrict = dataXML.strings.passwordChars;						//			// Set up combo boxes that require an API lookup...			//			soap.getData("country", countriesList);			soap2.getData("language", languagesList);		}				private function changeText(field:TextField, text:String):void {			var format:TextFormat = field.getTextFormat();			field.htmlText = text;			field.setTextFormat(format);		}						private function showError(err:String):void {			changeText(regError, "<b><i>" + err + "</i></b>");		}				private function countriesList(data:Object):void {			countries = new DataProvider();			for each(var element:XML in data.result.element) {				countries.addItem( {key:  element.key, label: element.value} );			}			regCountry.dataProvider = countries;			regCountry.prompt = " ";						trace(countries.length + " Countries");		}				private function languagesList(data:Object):void {			languages = new DataProvider();			for each(var element:XML in data.result.element) {				languages.addItem( {key:  element.key, label: element.value} );			}			regLanguage.dataProvider = languages;			regLanguage.prompt = " ";						trace(languages.length + " Languages");		}				private function changeGender(e:Event):void {			// One gender only, please!			if (e.target == regRadioMale) {				regRadioFemale.selected = !regRadioMale.selected;			} else {				regRadioMale.selected = !regRadioFemale.selected;			}			regValidGender();		}				private function changeSubscribe(e:Event):void {			// Yes *OR* No			if (e.target == regSubscribeYes) {				regSubscribeNo.selected = !regSubscribeYes.selected;			} else {				regSubscribeYes.selected = !regSubscribeNo.selected;			}			regValidSubscribe();		}				/********************************************************		 * PROCESS REGISTRATION		 ********************************************************/				private function register(e:MouseEvent):void {			if (validate()) {				var data:Object = {					firstName:	regFieldFirstName.value,					lastName:	regFieldLastName.value,					email:		regFieldEmail.value,					password:	regFieldPassword.value,					gender:		(regRadioFemale.selected ? "F" : "M"),					username:	regFieldUsername.value,					dob:		regDOByear.value + "-" + regDOBmonth.value + "-" + regDOBday.value,					country:	regCountry.value,					language:	regLanguage.value				};				soap.getData("register", registerDone, data);			}		}				private function registerDone(data:Object):void {			if (data.error != undefined) {				changeText(regError, data.error);			} else {				changeText(regError, dataXML.strings.regComplete);			}		}				/********************************************		 *  VALIDATION		 ********************************************/		 		private function validate(...ignore):Boolean {			var ok:Boolean = true;						// FIRST check all fields have been entered						ok &&= regValidGender();			ok &&= regValidSubscribe();			if (regFieldFirstName.value == "") regFieldFirstName.valid = ok = false;			if (regFieldLastName.value == "") regFieldLastName.valid = ok = false;			if (regFieldUsername.value == "") regFieldUsername.valid = ok = false;			if (regDOBmonth.value == "") ok = false;			if (regDOBday.value == "") ok = false;			if (regDOByear.value == "") ok = false;			if (regLanguage.value == "") ok = false;			if (regCountry.value == "") ok = false;						if (!ok) {				showError(dataXML.strings.error.fieldsRequired);				return false;			}						// NEXT check email & password for valid & matching entries						ok &&= regValidEmail();			ok &&= regValidPassword();			ok &&= regConfirmEmail();			ok &&= regConfirmPassword();						if (!ok) return false;						return ok;		}				private function regValidEmail(...ignore):Boolean {			var ok:Boolean;			var parts:Array = regFieldEmail.value.split("@");			if (parts.length == 2) {				trace(String(parts[1]).search("\\."));				ok = (String(parts[1]).search("\\.") > 0);			} else {				ok = false;			}			showError(ok ? "" : dataXML.strings.error.emailBad);			regFieldEmail.valid = ok;						// Also perform a check for the e-mail availability			soap2.getData("emailInUse", emailInUse, { email: regFieldEmail.value } );						return ok;		}				private function emailInUse(data:Object):void {			if (data.result == "true") {				regFieldEmail.valid = false;				showError(dataXML.strings.error.emailInUse);			}		}				private function regConfirmEmail(...ignore):Boolean {			var ok:Boolean = (regFieldEmail.value == regFieldEmail2.value);			regFieldEmail.valid = ok;			regFieldEmail2.valid = ok;			showError(ok ? "" : dataXML.strings.error.emailMismatch);			return ok;		}				private function regValidPassword(...ignore):Boolean {			var ok:Boolean = (regFieldEmail.value.length >= 6);			showError(ok ? "" : dataXML.strings.error.shortPassword);			regFieldPassword.valid = ok;			return ok;		}				private function regConfirmPassword(...ignore):Boolean {			var ok:Boolean = (regFieldPassword.value == regFieldPassword2.value);			regFieldPassword.valid = ok;			regFieldPassword2.valid = ok;			showError(ok ? "" : dataXML.strings.error.passwordMismatch);			return ok;		}				private function regValidGender(...ignore):Boolean {			var ok:Boolean = (regRadioMale.selected != regRadioFemale.selected);			regRadioMale.valid = regRadioFemale.valid = ok;			return ok;		}				private function regValidSubscribe(...ignore):Boolean {			var ok:Boolean = (regSubscribeYes.selected != regSubscribeNo.selected);			regSubscribeYes.valid = regSubscribeNo.valid = ok;			return ok;		}			}}