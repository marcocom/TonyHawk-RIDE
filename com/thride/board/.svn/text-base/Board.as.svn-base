package com.thride.board{	import flash.display.Stage;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;		import flash.geom.Point;		import flash.text.TextField;	import flash.text.TextFieldAutoSize;		import flash.utils.Timer;		import flash.geom.Rectangle;		import gs.TweenLite;	import gs.easing.*;	//TweenLite.to(mc, 1, {x:46, y:43, scaleX:1, scaleY:1, rotation:0, alpha:1, tint:0x3399ff, ease:Elastic.easeOut, onComplete:FunctionName });			public class Board extends MovieClip	{		public var SWFWIDTH:Number;		public var SWFHEIGHT:Number;						private var dataXML:XML = new XML();		private var xmlloader:Loader;				private var elementArr:Array;				private var xmlAsset:String;				private var bgClip:MovieClip;		private var titleClip:MovieClip;		private var navTitleTxt:MovieClip;		private var subtitleClip:MovieClip;		private var logoClip:MovieClip;		private var infoClip:MovieClip;		private var loaderClip:MovieClip;				private var sequenceClip:MovieClip;		private var sequenceContainer:MovieClip;		private var scrubClip:MovieClip;		private var scrubBar:MovieClip;		private var scrubHead:MovieClip;				private var navClip1:MovieClip;		private var navClip2:MovieClip;		private var navClip3:MovieClip;		private var navClip4:MovieClip;		private var navArr:Array = new Array();		private var playPointArr:Array = [1, 35, 65, 100];				private var currentNav:Number;		private var ratchetCushion:Number = 2;				public function Board()		{						addEventListener(Event.ADDED_TO_STAGE, onAdded);				}		////////CONSTRUCT				private function onAdded(e:Event)		{			visible = false;			bgClip = getChildByName("bgclip") as MovieClip;			titleClip = getChildByName("titledyn") as MovieClip;						navTitleTxt = getChildByName("subtitle_txt") as MovieClip;						subtitleClip = getChildByName("subtitledyn") as MovieClip;						sequenceContainer = getChildByName("sequencedyn") as MovieClip;						logoClip = getChildByName("logodyn") as MovieClip;			loaderClip = getChildByName("loadclip") as MovieClip;						scrubClip = getChildByName("scrubclip") as MovieClip;			scrubBar = scrubClip.getChildByName("bar") as MovieClip;			scrubHead = scrubClip.getChildByName("head") as MovieClip;			scrubClip.visible = false;						infoClip = getChildByName("infoclip") as MovieClip;						navClip1 = getChildByName("nav1") as MovieClip;			navClip2 = getChildByName("nav2") as MovieClip;			navClip3 = getChildByName("nav3") as MovieClip;			navClip4 = getChildByName("nav4") as MovieClip;			navArr = [navClip1, navClip2, navClip3, navClip4];					}				public function init($xmlsrc:String)		{									xmlAsset = $xmlsrc;						loadData();		}				private function initBG(){			loadTitle(dataXML.title.@asset, titleClip);			popTxt(dataXML.navtitle.valueOf(), navTitleTxt);					}				private function initNav()		{						for(var i:int; i < navArr.length; i++){				navArr[i].init((i+1));				navArr[i].buttonMode = true;				navArr[i].addEventListener(MouseEvent.ROLL_OVER, navOver);				navArr[i].addEventListener(MouseEvent.ROLL_OUT, navOut);				navArr[i].addEventListener(MouseEvent.CLICK, navClick);											}		}				////////////////////////////////////////////SCRUB				private function initScrub()		{						scrubClip.visible = true;			sequenceClip.gotoAndStop(1);			scrubHead.addEventListener(MouseEvent.MOUSE_DOWN, scrubDrag);			scrubBar.addEventListener(MouseEvent.CLICK, barClick);			scrubBar.buttonMode = true;			scrubHead.buttonMode = true;			openInfo(1);		}				private function killDrag(e:MouseEvent)		{			scrubHead.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_UP, killDrag);			removeEventListener(Event.ENTER_FRAME, scrubLogic);		}				private function scrubDrag(e:MouseEvent)		{			infoClip.gotoAndStop(1);			var scrubzone = new Rectangle(0, 5 , scrubBar.width, 1);			scrubHead.startDrag(false, scrubzone);			addEventListener(Event.ENTER_FRAME, scrubLogic);			stage.addEventListener(MouseEvent.MOUSE_UP, killDrag);					}				private function barClick(e:MouseEvent)		{			openInfo(0);			var xpos:Number = scrubBar.mouseX;			addEventListener(Event.ENTER_FRAME, scrubLogic);			TweenLite.to(scrubHead, 1, {x:xpos, ease:Strong.easeInOut});		}				private function scrubLogic(e:Event)		{			var perc:Number = scrubHead.x / scrubBar.width;			var playpoint:Number = Math.floor(sequenceClip.totalFrames*perc);			sequenceClip.gotoAndStop(playpoint);			//trace("scrub perc:"+perc+" play:"+playpoint);									for(var i:int; i < playPointArr.length; i++){				if((Math.round(perc*100) >= (playPointArr[i]-ratchetCushion)) && (Math.round(perc*100) <= (playPointArr[i]+ratchetCushion)) ){				//if(Math.round(perc*100) == playPointArr[i]){					//trace("RATCHET : "+(i+1));					var choice:Number = (i+1);									openInfo(choice);									} else {					//openInfo(0);				}			}		}				private function openInfo(choice:Number)		{			if(choice != currentNav){				currentNav = choice;				infoClip.gotoAndStop((choice+1));				if(choice > 0){					var n:String = "info"+choice;					trace("OPEN INFO :"+choice+" name:"+infoClip.getChildAt(0).name);					var mc:Info = infoClip.getChildAt(0) as Info;					 mc.init(choice, dataXML.infoinsert.info[(choice-1)].title.valueOf(), dataXML.infoinsert.info[(choice-1)].copyblock.valueOf()); 					for(var i:int; i < navArr.length; i++){						var k:NavUnit = navArr[i] as NavUnit;						i != (currentNav-1) ?							k.offState() : k.onState(); 					}				} 							}		}				private function refScrub(index:Number)		{			var perc:Number = playPointArr[(index-1)] * .01;			var playpoint:Number = Math.round(sequenceClip.totalFrames*perc);			trace("REFSCRUB :"+perc+" playpointNum:"+(perc*100));			//scrubHead.x = (scrubBar.width*perc);			var xpos:Number = (scrubBar.width*perc);			addEventListener(Event.ENTER_FRAME, scrubLogic);			TweenLite.to(scrubHead, 1, {x:xpos, ease:Strong.easeInOut});						//sequenceClip.gotoAndStop(playpoint);		}						////////////////////////////////////////////AUTOPLAY - not used		private function initAutoPlay()		{			scrubClip.visible = true;			addEventListener(Event.ENTER_FRAME, autoPlayLogic);		}				private function autoPlayLogic(e:Event)		{						sequenceClip.currentFrame <= sequenceClip.totalFrames ? sequenceClip.nextFrame() : sequenceClip.gotoAndStop(1);			//trace("SCRUBLOGIC playhead:"+sequenceClip.currentFrame);			var percplayed:Number = (sequenceClip.currentFrame / sequenceClip.totalFrames);			var goto:Number = scrubBar.width*percplayed;			scrubHead.x = goto;		}		///////////////////////////////////////////////////LOADERS				private function loadSequence()		{			TweenLite.to(loaderClip, 1, {alpha:1});			var l = new Loader();			function finishload(e:Event){				sequenceContainer.addChild(e.target.content);				sequenceClip = sequenceContainer.getChildAt(0) as MovieClip;				//initAutoPlay();				initScrub();				initNav();				TweenLite.killTweensOf(loaderClip);				TweenLite.to(loaderClip, .5, {alpha:0, ease:Strong.easeIn});			}			function loaderPop(e:ProgressEvent){				var perctxt:TextField = loaderClip.getChildByName("perc") as TextField;				var percent:Number = Math.round((e.bytesLoaded / e.bytesTotal) * 100);				perctxt.text = percent + "%";			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, loaderPop);			l.load(new URLRequest(dataXML.sequence.@asset));					}		private function loadLogo(asset:String, target:MovieClip)		{			trace("LOADGRAPHIC:"+asset);			var l = new Loader();			function finishload(e:Event){				loadSubtitle(dataXML.subtitle.@asset, subtitleClip);				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}		private function loadTitle(asset:String, target:MovieClip)		{			trace("LOADGRAPHIC:"+asset);			var l = new Loader();			function finishload(e:Event){				loadLogo(dataXML.logo.@asset, logoClip);				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}		private function loadSubtitle(asset:String, target:MovieClip)		{			trace("LOADGRAPHIC:"+asset);			var l = new Loader();			function finishload(e:Event){				target.addChild(e.currentTarget.content);				TweenLite.from(target, 1, {alpha:0, ease:Strong.easeOut});									loadSequence();			}			l.contentLoaderInfo.addEventListener(Event.COMPLETE, finishload);			l.load(new URLRequest(asset));					}				private function popTxt(txt:String, target:MovieClip)		{			var field:TextField = target.getChildByName("txt") as TextField;			field.htmlText = txt;		}						/////////////////////////////////////HANDLERS						private function navClick(e:MouseEvent){			var mc:NavUnit = e.currentTarget as NavUnit;			var index:Number = mc.index;			if(index != currentNav){				//currentNav = index;				mc.onState();				refScrub(index);				openInfo(index);				for(var i:int; i < navArr.length; i++){					if(i != (index-1)){						var kill:NavUnit = navArr[i] as NavUnit;						trace("NAV OFF:"+kill.name);						kill.offState();					}				}			}		}		private function navOver(e:MouseEvent){			var mc:NavUnit = e.currentTarget as NavUnit;			var index:Number = mc.index;			if(index != currentNav){				addChild(mc);				mc.overState();			}					}		private function navOut(e:MouseEvent){			var mc:NavUnit = e.currentTarget as NavUnit;			var index:Number = mc.index;			if(index != currentNav){				mc.offState();			}		}						 				/******************************************		XML		*******************************************/				private function loadData()		{			var dataURL:URLRequest = new URLRequest(xmlAsset);			var xmlLoader:URLLoader = new URLLoader(dataURL);			xmlLoader.addEventListener(Event.COMPLETE, xmlLoaded);			dataXML.ignoreWhitespace = true;			dataXML.ignoreProcessingInstructions;		} 				private function xmlLoaded(event:Event) 		{									dataXML = new XML(event.currentTarget.data);						var totalSections:Number = dataXML.elements().length();			trace("BOARD LOADDATA :: total K:"+event.currentTarget.bytesTotal);			trace("TOTAL FIRST NODES==================================================:"+totalSections); 												TweenLite.from(bgClip, .5, {x:-bgClip.width, ease:Bounce.easeOut, onComplete:initBG});			visible = true;		}			}}